

# Note that fields must be ordered according to certain BNF syntax
# in this file, although backing Python commands may not explicitly require
# the same ordering.

## expectedactivity
[expectedactivity-command]
syntax = expectedactivity <expectedactivity-params>
shortdesc = Fills gaps in results in preparation for use in statistical calculations.
description = For a result set and a list of fields, returns a modified \
			  result set containing a row for each unique combination of \
			  fields in the original results, for each distinct interval \
			  in the specified time range. This command is useful for    \
			  filling gaps in results prior to performing statistical \
			  analysis via stats, chart, or timechart.\p\\
			  Required Parameters:\i\\
			  o fields - a comma-separated list of fields\i\\
			  o earliest - the earliest time\i\\
			  o latest - the latest time\i\\
			  o interval - the spacing of the generated results, in seconds.
			  Options:\i\\
			  o append - Specifies whether to append the generated activity to the current result set\i\\
maintainer = dhazekamp
example1 = ... | expectedactivity fields="src,dest" earliest=-30d latest=now interval=86400
comment1 = Generate a table containing rows for each unique combination of src and dest for each day in the last 30 days
example2 = ... | expectedactivity append=False fields="host,sourcetype" earliest=-30d latest=now interval=3600
comment2 = Generate a table containing rows for each unique combination of host and sourcetype for each hour in the last 30 days.  Do not append to the current result set.
generating = true
tags = 
category = results::generate
related = gentimes

[expectedactivity-params]
syntax = <expectedactivity-param-fields> <expectedactivity-param-earliest> <expectedactivity-param-latest> <expectedactivity-param-interval>
description = Required parameters for the expectedactivity command.
 
[expectedactivity-param-fields]
syntax = fields=(<string>)?(,<string>)*
description = A comma-separated list of expected field names.

[expectedactivity-param-earliest]
syntax = earliest=<string>
description = A relative time specification.

[expectedactivity-param-latest]
syntax = latest=<string>
description = A relative time specification.

[expectedactivity-param-interval]
syntax = interval=<int>
description = Spacing in time of the generated results, in seconds.

[expectedactivity-options]
syntax = <expectedactivity-option-append>
description = Optional parameters for expectedactivity command.

[expectedactivity-option-append]
syntax = append=<bool>
description = A boolean indicator which determines whether or not to append to the existing result set.

## getcron
[getcron-command]
syntax = getcron <getcron-params> (<getcron-options>)*
# inputField=savedsearch_name outputField=cron
shortdesc = Retrieve the cron schedule for a saved search by name. 
description = For a result set and an input field, return the cron schedule \
			  for each saved search in the input field of the result set. \
			  Multivalued input fields are not supported.\p\\
			  Required Parameters:\i\\
			  o inputField - the input field\i\\
			  o outputField - the output field\p\\
			  Options:\i\\
			  o namespace - the app containing the saved search\i\\
			  o owner - the owner of the saved search.
maintainer = dhazekamp
example1 = ... | getcron inputField=my_saved_search_name outputField=cron
comment1 = Get the cron schedule for the saved search "my_saved_search_name" and store the result in the field "cron". 
generating = false
tags = 
category = fields::add

[getcron-params]
syntax = <getcron-param-inputField> <getcron-param-outputField>
description = Required parameters for the getcron command.

[getcron-options]
syntax = <getcron-option-namespace> | <getcron-option-owner>
description = Optional parameters for getcron command.

[getcron-param-inputField]
syntax = inputField=<string>
description = Input field for command. This field should contain the name of a saved search.

[getcron-param-outputField]
syntax = outputField=<string>
description = Output field of command. This field will be populated with the cron schedule of the saved search provided in inputField.

[getcron-option-namespace]
syntax = namespace=<string>
description = The app the saved search is located in. Defaults to "SA-Utils".

[getcron-option-owner]
syntax = owner=<string>
description = The owner of the saved search. Defaults to "nobody".



## n00p
[n00p-command]
syntax = n00p
shortdesc = Do nothing.
description = Perform a no-operation on the results set.  Used for testing search command input/output performance.
maintainer = dhazekamp
example = ... | n00p
usage = private, experimental
category = results::filter
related = noop



## outputcheckpoint
[outputcheckpoint-command]
syntax = outputcheckpoint <outputcheckpoint-params>
shortdesc = Output the results of the previous search pipeline to a modular input checkpoint directory.
description = The outputcheckpoint command takes the results of the previous \
			  search pipeline, formats them as a CSV, and outputs them to the \
			  checkpoint directory for consumption by a modular input. By \
			  default, modular inputs use the following directory for their \
			  checkpoint files:\p\\
			  $SPLUNK_HOME/var/lib/splunk/modinputs/<modular input name>\p\\
			  If the modular input directory does not exist, it will be created. \
			  This command does not validate whether a corresponding modular input \
			  exists.
category = results::write
generating = false
maintainer = dhazekamp
related = outputcsv, outputlookup
tags =

[outputcheckpoint-params]
syntax = <outputcheckpoint-param-modinput>
description = Required parameters for outputcheckpoint command.

[outputcheckpoint-param-modinput]
syntax = modinput=<string>
description = The name of the modular input. This will be used as the checkpoint directory name.



## postprocess
[postprocess-command]
syntax = postprocess <postprocess-params> 
shortdesc = Run a set of additional saved searches utilizing the results from a previous saved search. For use as an alert action only.
description = The postprocess command is used to run multiple saved searches \
			  utilizing the results from a previously executed saved search. \
			  This command should not be run directly but is intended to be \
			  used as an alert action, so that additional searches can be \
			  fired once a parent search completes. \p\\
			  To define a postprocess action for a saved search, perform\
			  the following additional configuration steps:\i\\
			  1. Add the parameter "action.postprocess = 1" to the parent search's stanza \
			     in savedsearches.conf.\i\\
			  2. Add a stanza to postprocess.conf in the same app with the\
			     parameters "savedsearch" and "postprocess".\p\\
			  The parameter "savedsearch" should contain the name of the parent search,\
			  and the parameter postprocess should contain the search string\
			  used to perform additional processing on the parent search's results.\
			  The name of the stanza in postprocess.conf is up to the user's discretion.\p\\
			  Required Parameters:\i\\
			    o sname - The name of the parent search.\i\\
			    o sid - A search identifier referring to a particular execution of the parent search.  
maintainer = dhazekamp
generating = false
tags = 
category = results::filter

[postprocess-params]
syntax = <postprocess-param-sname> <postprocess-param-sid>
description = Required parameters for postprocess command.

[postprocess-param-sname]
syntax = sname=<string>
description = The name of the parent saved search. Used to retrieve the set of postprocess searches via REST.

[postprocess-param-sid]
syntax = sid=<string>
description = A search identifier specifying a single execution of the parent saved search. Used to retrieve search result artifacts via "loadjob". 



## sendhtmlemail
# Most documentation and syntax cribbed from original sendemail command.
[sendhtmlemail-command]
syntax = sendhtmlemail to=<email_list> (from=<email_list>)? (<sendhtmlemail-option-cssfile>)? (cc=<email_list>)? (bcc=<email_list>)? (format=(html|raw|text|csv))? (inline=(true|false))? (priority=(highest|high|low|lowest))? (server=<string>)? (width_sort_columns=<bool>)? (graceful=<bool>)?
shortdesc =  Emails search results to specified email addresses. Optionally includes a CSS file to style tabular HTMl results.
description = Emails search results to a specified email addresses.\
		  Optionally includes a CSS file to style any tabular HTML results.\i\\
          o subject- text; specifies the subject line. default is "Splunk Results"\i\\
          o from - from line. something like: someone@domain.tld. default is "splunk@hostname".\i\\
          o to - to line; comma-separated quoted list of valid email addresses: someone@domain.tld\i\\
          o cc - cc line; comma-separated quoted list of valid email addresses: someone@domain.tld\i\\
          o bcc - blind cc line; comma-separated quoted list of valid email addresses: someone@domain.tld\i\\
          o format - html|raw|text|csv. default is html.\i\\
          o inline - true|false|none. determines whether results are in the message body or sent as an attachment, inline or not included. defaults to true.\i\\
          o sendresults - true|false. determines whether the results should be included with the email. defaults to false.\i\\
          o priority - lowest or 5, low or 4, high or 2, highest or 1. Default: normal. Set the priority of the email as it appears in the email client.\i\\
          o server - smtp server. default is localhost.\i\\
          o width_sort_columns - true|false whether the columns should be sorted by their width, only valid if format=text.\i\\
          o graceful - if set to true, no error is thrown, if email sending fails and thus the search pipeline continues execution as if sendemail was not there.\i\\
          o sendpdf - true|false. Reserved for PDF server.\i\\
          o pdfview - Reserved for PDF server.\i\\
          o searchid - Reserved for PDF server.\i\\
          o cssfile - The full path to a CSS file to include in the HTML output, if HTML output is specified. If a relative path is specified, it is relative to $SPLUNK_HOME/etc/apps/<namespace>/appserver/static/stylesheets.
usage = public
maintainer = jervin
comment1 = Send search results to the specified email.
example1 = ... | sendemail to="elvis@splunk.com"
comment2 = Send search results in HTML format with the subject "myresults".
example2 = ... | sendemail to="elvis@splunk.com,john@splunk.com" format=html subject=myresults server=mail.splunk.com
comment3 = Send search results in HTML format with the subject "myresults", and include CSS styling from the file "portrait.css".
example3 = ... | sendemail to="elvis@splunk.com,john@splunk.com" format=html subject=myresults server=mail.splunk.com cssfile="portrait.css"
tags = email mail alert
category = alerting

[email_list]
syntax = <email_address> (, <email_address> )*
example1 = "bob@smith.com, elvis@presley.com"

[email_address]
# if we supported regex, perhaps: [A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}
syntax = <string>
example1 = bob@smith.com

[sendhtmlemail-option-cssfile]
syntax = cssfile=<string>
description = A full or relative path to a CSS file. If relative, specifies the same application context as the current search.
example1 = portrait.css



## sorttimecols
[sorttimecols-command]
syntax = sorttimecols <sorttimecols-params>
shortdesc = Sort columns in a result set by time. Presupposes that the column names in the result set can be converted to timestamps.
description = Given a result set with columns and column names representing\
			dates or times (such as the output of the "timechart" command),\
			sort the columns by date, either ascending or descending. This\
			permits the construction of tabular reports with properly sorted\
			time-indexed columns.\p\\
			Parameters:\i\\
			  o timeformat - a time format string to be passed to strftime()\i\\
			  o direction - the sort order
maintainer = dhazekamp
generating = false
example1 = ... | sorttimecols timeformat="%B (%Y)" direction=asc
comment1 = Sort columns in a format equivalent to "Jan 2012" by date.
tags = 
category = results::order
usage = public

[sorttimecols-params]
syntax = <sorttimecols-param-timeformat> <sorttimecols-param-direction>
description = Required parameters for sorttimecols.

[sorttimecols-param-timeformat]
syntax = timeformat=<string>
description = A valid time format. Will be passed to eval's strftime command.

[sorttimecols-param-direction]
syntax = direction=(asc|desc)
description = The sort direction, ascending or descending by time.