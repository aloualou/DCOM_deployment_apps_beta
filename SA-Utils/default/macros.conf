
#####################
## Boolean
#####################

## str_to_bool
[str_to_bool(1)]
args       = field
definition = `str_to_bool($field$,$field$)`

[str_to_bool(2)]
args       = inField,outField
definition = eval $outField$=case($inField$==1 or $inField$=='1' or lower($inField$)=='t' or lower($inField$)=="true","true",$inField$==0 or $inField$=='0' or lower($inField$)=='f' or lower($inField$)=="false","false")

## tag2field
[tag2field(1)]
args       = field
definition = eval is_$field$=if(tag=="$field$","true","false")

[tag2field_requires(1)]
args       = field
definition = eval requires_$field$=if(tag=="requires_$field$","true","false")

[tag2field_should(1)]
args       = field
definition = eval should_$field$=if(tag=="should_$field$","true","false")


#####################
## Charting
#####################
[round(1)]
args       = field
definition = `round("$field$",2)`

[round(2)]
args       = field,precision
definition = `round("$field$","$field$","$precision$")`
errormsg   = precision (arg2) must be greater than zero
iseval     = 0
validation = precision>0

[round(3)]
args       = inField,outField,precision
definition = eval $outField$=round($inField$,$precision$)
errormsg   = precision (arg3) must be greater than zero
iseval     = 0
validation = precision>0

[stats2chart(1)]
args       = str_field
definition = eval temp="" | chart useother=`useother` first(count) over temp by $str_field$ | rename temp as count

[useother]
definition = true

[wrap(2)]
args       = field,length
definition = rex field=$field$ max_match=0 "(?<$field$>.{1,$length$})"
errormsg   = length (arg2) must be greater than zero
iseval     = 0
validation = length>=1


#####################
## Date/Time
#####################

## create simple date field
[get_date(1)]
args       = field
definition = eval date=$field$ | `ctime(date,"%m-%d-%Y")`

## convert epoch time to string
[ctime(1)]
args       = field
definition = `ctime($field$,"%m/%d/%Y %H:%M:%S")`

## convert epoch time to string w/ format
[ctime(2)]
args       = field,format
definition = convert timeformat="$format$" ctime($field$)

[ctime(3)]
args       = inField,outField,format
definition = `ctime($inField$,"$format$")` as $outField$

## convert string to epoch time
[mktime(1)]
args       = field
definition = `mktime($field$,"%m/%d/%Y %H:%M:%S")`

## convert string w/ format to epoch time
[mktime(2)]
args       = field,format
definition = convert timeformat="$format$" mktime($field$)

[mktime(3)]
args       = inField,outField,format
definition = `mktime($inField$,"$format$")` as $outField$

## format epoch time
[uitime(1)]
args       = field
definition = `uitime($field$,"%m/%d/%Y %H:%M:%S")`

## format epoch time w/ format
[uitime(2)]
args       = field,format
definition = fieldformat $field$=strftime($field$, "$format$")

## convert uptime (# secs) to string
[uptime2string(2)]
args       = inField,outField
definition =  eval days_dec=$inField$/86400 | eval days=floor(days_dec) | eval hours_dec=($inField$/3600)-(days*24) | eval hours=floor(hours_dec) | eval minutes_dec=($inField$/60)-(days*1440)-(hours*60) | eval minutes=floor(minutes_dec) | eval $outField$=days." days, ".hours." hours, ".minutes." minutes" | fields - days,hours,minutes

[timeDiff]
definition = `timeDiff(_time)`

[hourDiff]
definition = `hourDiff(_time)`

[dayDiff]
definition = `dayDiff(_time)`

[timeDiff(1)]
args       = field
definition = eval timeDiff=(time()-$field$)

[hourDiff(1)]
args       = field
definition = eval hourDiff=((time()-$field$)/3600)

[dayDiff(1)]
args       = field
definition = eval dayDiff=((time()-$field$)/86400)

## Get events based on age in hours
[hoursago(2)]
args       = num, comparator
definition = `hourDiff` | search hourDiff$comparator$$num$

## default to events less than N hours ago
[hoursago(1)]
args       = num
definition = `hoursago($num$,"<")`

## Get events based on age in days
[daysago(2)]
args       = num, comparator
definition = `dayDiff` | search dayDiff$comparator$$num$

## default to events less than N days ago
[daysago(1)]
args       = num
definition = `daysago($num$,"<")`

## Make a timestamp from a time field with unknown format.
#  For use in converting TimeRangePicker values $search.timeRange.earliest$
#  and $search.timeRange.latest$ to timestamps if they are specified as relative
#  time modifiers.
#
# Breakdown:
# 1. If fieldIn == null(), the empty string, or whitespace, yield the value of time()
# 2. If fieldIn begins with a digit, yield the digit (assumed to be a timestamp or 0).
# 3. If fieldIn is a relative timestamp beginning with one of @, +, -, yield the converted value.
#
# Real-time qualifiers are not supported as these cannot be easily converted.
# Also, it doesn't appear to be possible to match using $ to anchor the end
# of a regex in these macros, since the $ is regarded as part of a variable expansion.
#
[make_ts_field(2)]
args       = fieldIn, fieldOut
definition = eval $fieldOut$=case(match($fieldIn$, "^\d"), tostring($fieldIn$),  match($fieldIn$, "^([@\+-]){1}"), relative_time(time(), $fieldIn$),  true(), time())

[make_ts_value(2)]
args       = value, fieldOut
definition = eval $fieldOut$=case(match("$value$", "^\d"), tostring("$value$"),  match("$value$", "^([@\+-]){1}"), relative_time(time(), "$value$"),  true(), time())

## Make the earliest and latest times that would capture the previous time-range
#  This is useful when you want to get historical information in order to
#  determine if information within a given window is higher or lower than
#  the previous window of the same size. For example, an earliest and
#  latest time range of -24h@h and now will produce a time-range of
#  -48h@h to -24h@h. The returned contents will be  a search that can be
#  used in a tstats where clause.
#
#  Breakdown:
#  1. Make sure the search returns one row (with stats)
#  2. Convert the earliest time to epoch
#  3. Convert the latest time to epoch
#  3. Get the size of the time-range (the difference between the earliest and latest)
#  4. Define the latest time (this will be the previous earliest)
#  5. Define the earliest time
#  6. If the earliest is negative (the user selected all-time), then set the earliest to 0
#  7. If the latest is negative latest to 0 to prevent an error
#  8. Make the search statement for the where clause
#  9. Strip off unnecessary fields
#
[make_previous_time_range(2)]
args       = earliest, latest
definition = stats count | `make_ts_value($earliest$,earliest)` | `make_ts_value($latest$,latest)` | eval time_span_diff=latest-earliest | eval latest=round(earliest) | eval earliest=round(earliest-time_span_diff) | eval earliest=if(earliest < 0, 0, earliest) | eval latest=if(latest < 0, 0, latest) | eval search="earliest=".earliest." latest=".latest | fields search

## Macro for converting TimeRangePicker values to a "between X and Y days ago" format,
#  for use when using trackers which have a firstTime, lastTime value.
[tracker_timerange_by_field(4)]
args       = begin, end, firstTime, lastTime
definition = `make_ts_field($begin$, earliestQual)` | `make_ts_field($end$, latestQual)` | where ($lastTime$>earliestQual AND $firstTime$<latestQual) | fields - earliestQual, latestQual

[tracker_timerange_by_value(4)]
args       = begin, end, firstTime, lastTime
definition = `make_ts_value($begin$, earliestQual)` | `make_ts_value($end$, latestQual)` | where ($lastTime$>earliestQual AND $firstTime$<latestQual) | fields - earliestQual, latestQual

# Same as previous, just shortened to use the convention firstTime, lastTime
# for field names.
[tracker_timerange_by_field(2)]
args       = begin, end
definition = `tracker_timerange_by_field($begin$, $end$, firstTime, lastTime)`

[tracker_timerange_by_value(2)]
args       = begin, end
definition = `tracker_timerange_by_value($begin$, $end$, firstTime, lastTime)`

## Macro for setting time given an offset
[set_time]
definition = `set_time("-0s")`

[set_time(1)]
args = qual
definition = eval _time=relative_time(time(),"$qual$")

[time_subsearch(2)]
args = earliest,latest
definition = stats count | eval search="_time>".floor(relative_time(time(),"$earliest$"))." _time<".floor(relative_time(time(),"$latest$")) | fields search


#####################
## Event ID
#####################
## Create the "event_hash" field as the md5sum of the "_raw" field (event text)
[get_event_hash]
definition = eval event_hash=md5(_time._raw)

## Create the unique event identifier ("event_id") as a combination of "splunk_server","index", and "event_hash" fields
## Makes an event_id compatible with real-time (no _cd)
[get_event_id]
definition = `get_event_hash` | eval event_id=splunk_server."@@".index."@@".event_hash

## Dissect the unique event identifier ("event_id") into "orig_splunk_server", "orig_index", "orig_event_hash"
## Parses an event_id compatible with real-time (no _cd)
## See also props.conf "REPORT-orig_splunk_server-orig_index-orig_event_hash_for_notable = orig_splunk_server-orig_index-orig_event_hash_for_notable"
[parse_event_id(1)]
args       = event_id
definition = rex field=$event_id$ "(?<orig_splunk_server>.*?)\@\@(?<orig_index>.*?)\@\@(?<orig_event_hash>.*)"


#####################
## Math
#####################
[bytes2kbytes(1)]
args       = field
definition = `bytes2kbytes($field$,$field$)`

[bytes2kbytes(2)]
args       = inField,outField
definition = eval $outField$=$inField$/1024

[bytes2mbytes(1)]
args       = field
definition = `bytes2mbytes($field$,$field$)`

[bytes2mbytes(2)]
args       = inField,outField
definition = eval $outField$=$inField$/1048576

[bytes2gbytes(1)]
args       = field
definition = `bytes2gbytes($field$,$field$)`

[bytes2gbytes(2)]
args       = inField,outField
definition = eval $outField$=$inField$/1073741824

## Standard deviation
[standard_deviations]
definition = inputlookup append=T standard_deviations

[stdev(2)]
args       = intField,countField
definition = eventstats min($intField$) as min_$intField$,max($intField$) as max_$intField$,sum($countField$) as total | eventstats sum(eval($intField$*$countField$/total)) as mean_$intField$ | eventstats sum(eval(pow($intField$-mean_$intField$,2)*$countField$)) as sumsq | eval stdev=sqrt(sumsq/(total-1)) | `get_stdev_index($intField$)` | eval stdev=if(isnull(stdev),0,stdev)

[stdev_desired_result(3)]
args       = Z,mean,outField
definition = eval $outField$=($Z$*stdev)+$mean$

[get_stdev_index(1)]
args       = intField
definition = eval Z=(($intField$-mean_$intField$)/stdev)

[get_delta]
args       =
definition = `get_delta(current_count,historical_count)`

[get_delta(2)]
args       = field1,field2
definition = eval $field1$=if(isnum($field1$),$field1$,0) | eval $field2$=if(isnum($field2$),$field2$,0) | eval delta=$field1$-$field2$


#############################
## Multivalued field handling
#############################
[filter_mv_field(2)]
# Filters a value from a multi-valued field UNLESS it is the only value. 
args       = field, value
definition = eval $field$=if(mvcount($field$) > 1 AND $field$="$value$", mvfilter($field$!="$value$"), $field$)

## create a mv field from a sv field w/ default separator
[makemv(1)]
args       = field
definition = `makemv($field$,"|")`

## create a mv field from a sv field w/ user defined separator
[makemv(2)]
args       = field, sep
definition = eval $field$=split($field$,"$sep$")

## create a sv field from a mv field w/ default separator
[makesv(1)]
args       = field
definition = `makesv($field$,"|")`

## create a sv field from a mv field w/ user defined separator
[makesv(2)]
args       = field, sep
definition = eval $field$=mvjoin($field$,"$sep$")

## appends the values of field2 to field1
[mvappend_field(2)]
args       = field1, field2
definition = eval $field1$=mvappend($field1$,NULL,$field2$)

## appends value to field
[mvappend_value(2)]
args       = field, value
definition = eval $field$=mvappend($field$,"$value$",NULL)

## appends value to field if bool==true
[mvappend_bool(3)]
args       = field, value, bool
definition = eval $field$=if($bool$=="true",mvappend($field$,"$value$",NULL),$field$)

## appends value to field if is_value==true
## i.e. appends "foo" to "bar" if "is_foo==true"
[mvappend_is(2)]
args       = field, value
definition = `mvappend_bool($field$,$value$,"is_$value$")`

## appends should_value to field if should_value==true
## i.e. appends "should_foo" to "bar" if "should_foo==true"
[mvappend_should(2)]
args       = field, value
definition = `mvappend_bool($field$,should_$value$,"should_$value$")`

## appends requires_value to field if requires_value==true
## i.e. appends "requires_foo" to "bar" if "requires_foo==true"
[mvappend_requires(2)]
args       = field, value
definition = `mvappend_bool($field$,requires_$value$,"requires_$value$")`

## mvdedup
## takes a multivalued field as input and creates a multivalued field containing only unique input values as output
[mvdedup(1)]
args       = input
definition = `mvdedup($input$,$input$)`

[mvdedup(2)]
args       = input, output
definition = `makesv($input$)` | lookup mvdedup input as $input$ OUTPUT output as unique_$output$ | rename unique_$output$ as $output$


#####################
## Integers
#####################

## 1.  Trim a number x (where x==11) of leading characters from _raw
## 1a. This is what the offset param for luhn_lookup.py does
## 2.  Pull out integer sequences based on regular expression
## 2a. Using \s and - as default separators
## 2b. For additional separators add additional "(?:\d+[<sep>]*){14,})" to the list
## 2c. {14,} defines minStrength y (where y==14)
[get_integer_seq]
definition = eval sub_raw=substr(_raw,11) | rex field=sub_raw max_match=10 "(?<integer_seq>(?:\d+[\s]*){14,}|(?:\d+[-]*){14,})"


#####################
## Per Panel Filtering
#####################

## Per Panel Filtering Breakdown
## 1   - Preserve _time field in temp_time
## 2   - Set _time as the current time
## 3   - Set lookup type to blacklist
## 4   - Perform OUTPUT lookup for blacklisted entries
## 5   - Set _time back to it's original values
## 6   - Set/Unset "ppf_filter" based on filter=blacklist and time bounds
## 7   - Reset ppf_st/ppf_et by removing these fields
## 8   - Set _time as the current time
## 9   - Set lookup type to whitelist
## 10  - Perform OUTPUTNEW lookup for whitelisted entries
## 10a - OUTPUTNEW is important here!  This basically ignores entries that previously matched a blacklist
## 11  - Set _time back to it's original value
## 12  - Filter based on filter=whitelist and time bounds
## 13  - Set/Unset "ppf_filter" based on filter=whitelist and time bounds
## 14  - Remove whitelisted entries
## 15  - Remove all ppf fields except (ppf_filter)
[per_panel_filter(2)]
args       = lookup,inputFields
definition = `per_panel_filter("$lookup$","$inputFields$",time())`

[per_panel_filter(3)]
args       = lookup,inputFields,compareTime
definition = eval temp_time=_time | eval _time=now() | eval ppf_lookup_type="blacklist" | lookup update=true $lookup$ $inputFields$,filter as ppf_lookup_type OUTPUT start_time as ppf_st,end_time as ppf_et,filter as ppf_filter | eval _time=temp_time | eval ppf_filter=if(ppf_filter="blacklist" AND ppf_st<$compareTime$ AND (ppf_et>$compareTime$ OR isnull(ppf_et)),ppf_filter,null()) | fields - ppf_st,ppf_et | eval _time=now() | eval ppf_lookup_type="whitelist" | lookup update=true $lookup$ $inputFields$,filter as ppf_lookup_type OUTPUTNEW start_time as ppf_st,end_time as ppf_et,filter as ppf_filter | eval _time=temp_time | eval ppf_filter=if(ppf_filter="blacklist" OR (ppf_filter="whitelist" AND ppf_st<$compareTime$ AND (ppf_et>$compareTime$ OR isnull(ppf_et))),ppf_filter,null()) | search NOT ppf_filter=whitelist | fields - ppf_lookup_type,ppf_st,ppf_et,temp_time

[ppf_updates]
definition = eventtype=ppf_updates

#####################
## Post Process
#####################
[postprocess_audit]
definition = eventtype=postprocess_audit

[postprocess_transact]
definition = transaction host,invocation_id keepevicted=T


#####################
## REST
#####################
[rest_handler_transactions]
definition = index=_internal sourcetype=*:rest_handler (Entering OR "completed successfully") | `get_namespace` | rex field=sourcetype "(?<handler>\w+):rest_handler" | rex "ACTION_(?<action>\w+)" | transaction handler,action startswith=Entering endswith="completed successfully" maxspan=30s maxpause=30s maxevents=2 


#####################
## Sorting
#####################
[sort_chart]
definition = `sort_chart(10)`

[sort_chart(1)]
args       = head
definition = addtotals fieldname=Total | eval Total=if(isnotnull(src_port),Total-src_port,Total) | eval Total=if(isnotnull(dest_port),Total-dest_port,Total) | sort $head$ - Total | fields - Total

[sort_chart(2)]
args       = head, fields
definition = addtotals fieldname=Total $fields$ | sort $head$ - Total | fields - Total


#####################
## Summary Indexing
#####################
[get_summary(2)]
args       = index,search_name
definition = index=$index$ search_name="$search_name$" `filter` | `makemv(orig_tag)` | `mvappend_field(tag,orig_tag)`

[settags_governance]
definition = (tag="pci" OR tag="cardholder")

[filtertags(1)]
args       = domain
definition = `filtertags("$domain$","tag")`
errormsg   = domain (arg1) must be one of: access or network
iseval     = 0
validation = domain="access" OR domain="endpoint" OR domain="network"

[filtertags(2)]
args       = domain,outField
definition = eval $outField$=mvfilter(`settags_$domain$` OR `settags_governance`)
errormsg   = domain (arg1) must be one of: access or network
iseval     = 0
validation = domain="access" OR domain="endpoint" OR domain="network"

[settags(1)]
args       = domain
definition = eval tag=mvjoin(mvfilter(`settags_$domain$` OR `settags_governance`),"|") | rename tag as orig_tag
errormsg = domain (arg1) must be one of: access or network
iseval = 0
validation = domain="access" OR domain="endpoint" OR domain="network"


#####################
## Transformations
#####################

## lower
[lower(1)]
args       = field1
definition = eval $field1$=lower($field1$)

## namespace
[get_namespace]
definition = lookup local=true sourcetype2namespace sourcetype OUTPUT namespace

## transport_dest_port
[get_transport_dest_port]
args       =
definition = fillnull value=unknown transport | fillnull value=0 dest_port | eval transport_dest_port=transport."/".dest_port

[split_transport_dest_port(1)]
args       = field
definition =  rex field=$field$ "(?<transport>[^/]+)/(?<port>\d+)" | fillnull value=unknown transport | fillnull value=0 dest_port

## trim
[trim(1)]
args       = field
definition = eval $field$=trim($field$," ")

## truncate
[truncate(2)]
args       = field,length
definition = eval $field$=if(length($field$) > $length$, substr($field$, 0, $length$) + "...", $field$)


#####################
## TSIDX
#####################
[tscollect(1)]
args       = namespace
definition = `tscollect("$namespace$","true","false")`

[tscollect(2)]
args       = namespace,squashcase
definition = `tscollect($namespace$,$squashcase$,"false")`
errormsg   = squashcase (arg2) must be one of: true or false
iseval     = 0
validation = squashcase="true" OR squashcase="false"

[tscollect(3)]
args       = namespace,squashcase,keepresults
definition = tscollect namespace=$namespace$ squashcase=$squashcase$ keepresults=$keepresults$
errormsg   = squashcase/keepresults (arg2/arg3) must be one of: true or false
iseval     = 0
validation = (squashcase="true" OR squashcase="false") AND (keepresults="true" OR keepresults="false")

[tsidx_rest]
definition = rest /services/data/tsidxstats/namespaces count=0 | table splunk_server tsidx_namespace file* earliest latest values* 

[tstats]
definition = tstats prestats=true local=`tstats_local` `summariesonly`

[tstats_local]
definition = false

[summariesonly]
definition = summariesonly=`summariesonly_bool` allow_old_summaries=`allow_old_summaries_bool`

[summariesonly_bool]
definition = true

[allow_old_summaries_bool]
definition = true


#####################
## Users
#####################

## get_realname breakdown
## 1 - Lookup the users realname in notable_owners.csv
## 2 - If the users realname could not be found, use the username
[get_realname(1)]
args = user
definition = lookup update=true splunk_user_realnames user as $user$ OUTPUTNEW realname as $user$_realname | eval $user$_realname=if(isnull($user$_realname),$user$,$user$_realname)
errormsg =
iseval = 0
validation =