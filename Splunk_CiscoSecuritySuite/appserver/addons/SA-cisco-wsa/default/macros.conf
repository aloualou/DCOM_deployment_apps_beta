# format byte count according to the normal, human readable sizes.  best for reporting and dashboards.
# output into a new field.
# usage:  `resize-bytes("h_bytes",bytes)`
[resize-bytes(2)]
args = var_name,bytes
definition = eval $var_name$ = $bytes$ | eval $var_name$=case($var_name$>=1099511627776,tostring(round($var_name$/1099511627776,2))+"TB",$var_name$>=1073741824,tostring(round($var_name$/1073741824,2))+"GB",$var_name$>=1048576,tostring(round($var_name$/1048576,2))+"MB",$var_name$>=1024,tostring(round($var_name$/1024,2))+"KB",isnotnull($var_name$),tostring($var_name$)+"b",isnull($var_name$),"-")

# format byte count according to the normal, human readable sizes. output size metric as a separate var.
# output into a new field.
# usage:  `resize-bytes("h_bytes",bytes)`
[resize-bytes-num(2)]
args = var_name,bytes
definition = eval units = case($bytes$>=1024 AND $bytes$<1048576,"KB",$bytes$>=1048576 AND $bytes$<1073741824,"MB",$bytes$>=1073741824 AND $bytes$<1099511627776,"GB",$bytes$>=1099511627776,"TB")|eval $var_name$ = case($bytes$>=1024 AND $bytes$<1048576,round($bytes$/1024,2),$bytes$>=1048576 AND $bytes$<1073741824,round($bytes$/1048576,2),$bytes$>=1073741824 AND $bytes$<1099511627776,round($bytes$/1073741824,2),$bytes$>=1099511627776, round($bytes$/1099511627776,2))
		
#
# Turn the x_wbrs_score into a red/orange/yellow/blue/green filter
# When score is non-numeric, default to yellow filter
#
[cisco-wsa-score(1)]
args = field
definition = case($field$ = "-", "yellow",$field$ <= -6.0, "red",$field$ > -6.0 AND $field$ <= -2.0, "orange",$field$ > -2.0 AND $field$ <= 2.0, "yellow",$field$ > 2.0 AND $field$ <= 6.0, "blue",$field$ > 6.0, "green",1=1,"yellow")
# shortens target to length and appends with indicator
# the act of appending the indicator is included in the overall length calculation (resulting in related validation, below)
# usage:  eval url="http://www.splunk.com" | `shorten(Website,url,20,"...")`
[shorten(4)]
args = var_name,text,length,indicator
definition = eval $var_name$=if(len($text$)>$length$,substr($text$,1,$length$-len("$indicator$"))+"$indicator$",$text$)
validation = validate(isint(length),"length is expected to be an int, not "+typeof(length),isstr(text),"text is expected to be a string, not "+typeof(text),length>len(indicator),"length must be greater than length of indicator")
