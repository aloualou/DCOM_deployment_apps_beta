#Copyright (C) 2005-2014 Splunk Inc. All Rights Reserved.
[TimeDatastoreSummary]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
dispatch.earliest_time = -4h
dispatch.latest_time = now
enableSched = 1
description = Used to update the TimeDatastoreSummary lookup
search = sourcetype=vmware:inv:datastore | spath "moid" output="moid" | spath "changeSet.info.freeSpace" output="freeSpace" | spath "changeSet.summary.uncommitted" output="uncommitted" | spath "changeSet.info.maxFileSize" output="maxFileSize" | spath "changeSet.info.name" output="name" | spath "changeSet.info.url" output="url" | spath "changeSet.info.vmfs.blockSizeMb" output="blockSizeMb" | spath "changeSet.info.vmfs.extent{}.diskName" output="path" | spath "changeSet.info.vmfs.extent{}.partition" output="pathPartition" | spath "changeSet.info.vmfs.maxBlocks" output="maxBlocks" | spath "changeSet.info.vmfs.uuid" output="uuid"| spath "changeSet.info.vmfs.version" output="version"| spath "changeSet.info.vmfs.vmfsUpgradable" output="vmfsUpgradable"| spath "changeSet.summary.accessible" output="accessible"| spath "changeSet.summary.capacity" output="capacity" | spath "changeSet.summary.multipleHostAccess" output="multipleHostAccess" | spath "changeSet.summary.type" output="type" | spath "changeSet.info.nas.remotePath" output="remotePath" | table _time, moid, host, freeSpace, uncommitted, maxFileSize, name, url, blockSizeMb, path, pathPartition, maxBlocks, uuid, version, vmfsUpgradable, accessible, capacity, multipleHostAccess, type, remotePath | search freeSpace=* OR maxFileSize=* OR name=* OR url=* OR blockSizeMb=* OR path=* OR pathPartition=* OR maxBlocks=* OR uuid=* OR version=* OR vmfsUpgradable=* OR accessible=* OR capacity=* OR multipleHostAccess=* OR type=* OR remotePath=* | eval path=coalesce(remotePath, path) | fields - remotePath | fillnull value="0" freeSpace, capacity, maxFileSize | fillnull value="N/A" | eval freeSpace=`format_bytes(freeSpace)` | eval maxFileSize=`format_bytes(maxFileSize)` | eval uncommitted=`format_bytes(uncommitted)` | eval capacity=`format_bytes(capacity)` | inputlookup TimeDatastoreSummary append=t | sort 0 host, moid, _time | dedup consecutive=t freeSpace maxFileSize name url blockSizeMb path pathPartition maxBlocks uuid version vmfsUpgradable accessible capacity multipleHostAccess type | sort - _time | outputlookup TimeDatastoreSummary

[TimeAboutHost]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
dispatch.earliest_time = -45m
dispatch.latest_time = -15m
enableSched = 0 
description = Used to update the TimeAboutHost lookup
search = sourcetype=vmware:inv source=AboutInfo subpath="summary/config/product" | dedup meid | table _time, meid, name, version, build, osType | inputlookup TimeAboutHost append=t | sort 0 meid _time | dedup meid, name, version, build, osType consecutive=t | sort 0 -_time | outputlookup TimeAboutHost

[TimeClusterServicesAvailability]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
dispatch.earliest_time = -4hr
dispatch.latest_time = now 
enableSched = 1
description = Used to update the TimeClusterServicesAvailability lookup
search = sourcetype="vmware:perf:clusterservices" | inputlookup TimeClusterServicesAvailability append=t | sort 0 host, moid, _time | dedup consecutive=t host, moid, p_average_clusterServices_effectivecpu_megaHertz, p_average_clusterServices_effectivemem_megaBytes | table _time, host, moid, p_average_clusterServices_effectivecpu_megaHertz, p_average_clusterServices_effectivemem_megaBytes | outputlookup TimeClusterServicesAvailability

[TimeInvHostHardwareAndLicense]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
dispatch.earliest_time = -45m
dispatch.latest_time = -15m
enableSched = 0
description = Used to update the TimeInvHostHardwareAndLicense lookup
search = sourcetype=vmware:inv ( source="HostHardwareSummary" OR source="HostHyperThreadScheduleInfo") | dedup source,meid | eval cores_per_socket=numCpuCores/numCpuPkgs  | eval logical_processors=numCpuThreads | eval hyperthreading=if(active="True", "Active", "Inactive") | fields _time hyperthreading meid moname vendor model numNics numCpuCores cpuModel numCpuPkgs cores_per_socket logical_processors host | stats first(_time) as _time first(*) as * by meid | join type=outer host [search sourcetype=vmware:inv source="LicenseManagerLicenseInfo" | rename name as license | fields license host] | eval license=if(isnull(license),"UNKNOWN",license) |inputlookup TimeInvHostHardwareAndLicense append=t | sort 0 meid _time | dedup license hyperthreading meid moname vendor model numNics numCpuCores cpuModel numCpuPkgs cores_per_socket logical_processors consecutive=t | sort 0 -_time | outputlookup TimeInvHostHardwareAndLicense

[UpdateFullHierarchyAndEntity]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
dispatch.earliest_time = -5hr
dispatch.latest_time = now 
enableSched = 1 
description = Used to update the FullHierarchy lookup and the EntityLookup
search = sourcetype=vmware:inv:hierarchy | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.resourcePool.moid output=rp | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath changeSet.name output=name | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | eval rp=if(isnull(rp), "N/A", rp) | table _time, moid, type, name, parent, parentType, host, rp, rootFolderMoid | inputlookup FullHierarchy append=t | sort 0 host, moid, _time | streamstats latest(name) AS lastseenname latest(rp) AS lastseenrp BY host, moid | eval name=if(isnull(name),lastseenname,name) | eval rp=if(isnull(rp), if(isnull(lastseenrp), "N/A", lastseenrp), rp) | fields - lastseenname, lastseenrp | dedup consecutive=t host, moid, parent, name, rp | sort 0 -_time | outputlookup FullHierarchy | dedup moid, type, name, host | table moid, type, name, host | eval lowername=lower(name) | sort 0 -moid | outputlookup Entity

[CurrentHierarchy]
is_visible = false
action.email.inline = 1
cron_schedule = 5,20,35,50 * * * *
description = This search gives the current state of the hierarchy for TreeNav's. Note that it should be run on a time window of hierarchyinv_interval + hierarchyinv_expiration + [duration_of_hierarchyinv_collection]
dispatch.earliest_time = -8h
dispatch.latest_time = now
enableSched = 1
search = sourcetype=vmware:inv:hierarchy | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | search name!="" |lookup FullHierarchy host, moid as parent OUTPUT parent as grandparent parentType as grandparentType | eval parent=if(parentType=="ComputeResource", grandparent, parent) | eval parentType=if(parentType=="ComputeResource", grandparentType, parentType) | lookup FullHierarchy host, moid as parent OUTPUT parent as grandparent parentType as grandparentType name as parentName | eval parent=if(parentName=="host",grandparent,parent) | eval parentType=if(parentName=="host",grandparentType,parentType) | rename parent as uiparent parentType as uiparentType | table host moid name type uiparent uiparentType rootFolderMoid

[CurrentHostDetail]
is_visible = false
action.email.inline = 1
cron_schedule = 5,20,35,50 * * * *
description = This search gives the current state of all host systems. Note that it should be run on a time window of hierarchyinv_interval + hierarchyinv_expiration + [duration_of_hierarchyinv_collection]
dispatch.earliest_time = -12h
dispatch.latest_time = now
enableSched = 1
search = sourcetype="vmware:inv:hostsystem" | spath moid output=moid | spath changeSet.name output=name | spath collectionVersion output=collectionVersion | spath changeSet.summary.overallStatus output=overallStatus | spath changeSet.summary.quickStats.overallCpuUsage output=overallCpuUsage | spath changeSet.summary.quickStats.overallMemoryUsage output=overallMemoryUsage | spath changeSet.summary.hardware.cpuMhz output=cpuMhz | spath changeSet.summary.hardware.memorySize output=memorySize | spath changeSet.summary.hardware.numCpuCores output=CPUCores | spath changeSet.summary.hardware.vendor output=manufacturer | spath changeSet.summary.hardware.model output=model | spath changeSet.summary.hardware.numNics output=numNics | spath changeSet.summary.hardware.model output=processorType | spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs | spath changeSet.summary.hardware.numCpuThreads output=logicalProcessor | spath changeSet.config.hyperThread.active output=active | spath changeSet.summary.host.moid output=HostSystem | spath changeSet.parent.moid output=HostSystemParent | spath changeSet.parent.type output=HostSystemParentType | spath changeSet.vm.ManagedObjectReference{}.moid output=vms | eval num_vms=mvcount(vms) | eval vms=mvjoin(vms,";") | stats first(overallStatus) As overallStatus  first(manufacturer) As Manufacturer first(model) As Model first(numNics) As NumberofNICs first(logicalProcessor) As LogicalProcessors first(processorType) As ProcessorType first(numCpuPkgs) As ProcessorSockets first(overallMemoryUsage) AS MemUsg first(overallCpuUsage) AS CpuUsg first(cpuMhz) AS MhzPerCore first(memorySize) AS Mem first(CPUCores) as CPUCores  first(name) As Host first(HostSystem) AS HostSystem first(HostSystemParent) As HostSystemParent first(HostSystemParentType) As HostSystemParentType first(vms) as vms first(num_vms) as num_vms by moid, host| eval MaxCpuMhz=MhzPerCore*CPUCores | eval MaxMemMB=((Mem/1024)/1024) | eval FreeMem=MaxMemMB-MemUsg | eval FreeCpu=MaxCpuMhz-CpuUsg |  eval CoresperSocket=CPUCores/ProcessorSockets |  eval Hyperthreading=if(active="True", "Active", "Inactive") | eval ClusterMoid=if(HostSystemParentType="ClusterComputeResource", HostSystemParent, "N/A") | addinfo | eval _time=info_max_time | lookup FullHierarchy host, moid AS ClusterMoid OUTPUT name AS Cluster

[UniqueNameLookupUpdate]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
description = Updates the UniqueNameLookup, used to sort by name for virtual machines when duplicate names exist
dispatch.earliest_time = -1hr
dispatch.latest_time = now 
enableSched = 0 
search = source=EntityViews (type=HostSystem OR type=VirtualMachine) (isvc=true OR NOT vc=*) | inputlookup UniqueNameLookup append=t| dedup meid | streamstats count as rank by name | eval new_name = if(rank>1,name . "_" .rank,name) | table meid, new_name, name | outputlookup UniqueNameLookup

[DatastoreListLookupUpdate]
is_visible = false
action.email.inline = 1 
cron_schedule = */15 * * * * 
description = Updates the DatastoreList, used to show all datastores existant in an environment
dispatch.earliest_time = -1hr
dispatch.latest_time = now 
enableSched = 0 
search = sourcetype="vmware:inv" source="datastore" | table meid moname MOR vc | inputlookup append=t DatastoreList | dedup meid | outputlookup DatastoreList
