[populate_exporter_list(1)]
args = exp_group
definition = index="flowintegrator_exp_ips" search_name="save_exporters" | join type=left exp_ip [ search `snmp_device_name` ] | eval name = if(isnull(SNMPDeviceName), exp_ip, SNMPDeviceName) | table exp_ip name | dedup exp_ip | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group | search exp_group="$exp_group$" | table exp_ip name | sort name | eval name=if((name==exp_ip),exp_ip,if(exp_ip=="*","All",exp_ip." (".name.")"))

[populate_exporter_group_list]
definition = inputlookup exporters_devices_lookup | rename device_group as exp_group | sort exp_group | dedup exp_group

[netflow_index]
definition = index=flowintegrator sourcetype=flowintegrator

[netflow_search_traffic_rules]
definition = `netflow_index` (nfc_id=20004 OR nfc_id=20005 OR nfc_id=20011 OR nfc_id=20017 OR nfc_id=20063 OR nfc_id=20067 OR nfc_id=20068 OR nfc_id=20064 OR nfc_id=20065 OR nfc_id=20066)

[netflow_search_rule_20002]
definition = `netflow_index` nfc_id=20002

[netflow_search_rule_20004]
definition = `netflow_index` nfc_id=20004

[netflow_search_rule_20005]
definition = `netflow_index` nfc_id=20005

[netflow_search_rule_20011]
definition = `netflow_index` nfc_id=20011

[netflow_search_rule_20066]
definition = `netflow_index` nfc_id=20066

[netflow_search_rule_20065]
definition = `netflow_index` nfc_id=20065

[netflow_search_rule_20064]
definition = `netflow_index` nfc_id=20064

[netflow_search_rule_20067]
definition = `netflow_index` nfc_id=20067

[netflow_search_rule_20068]
definition = `netflow_index` nfc_id=20068

[netflow_search_rule_20063]
definition = `netflow_index` nfc_id=20063

[netflow_search_rule_20017]
definition = `netflow_index` nfc_id=20017

[netflow_search_cisco_rules]
definition = `netflow_index` (nfc_id=20018 OR nfc_id=20019 OR nfc_id=20020 OR nfc_id=20021)

[netflow_search_rule_20018]
definition = `netflow_index` nfc_id=20018

[netflow_search_rule_20019]
definition = `netflow_index` nfc_id=20019

[netflow_search_rule_20020]
definition = `netflow_index` nfc_id=20020

[netflow_search_rule_20021]
definition = `netflow_index` nfc_id=20021

[netflow_search_palo_rules]
definition = `netflow_index` nfc_id=20030 OR nfc_id=20031 OR nfc_id=20032 OR nfc_id=20033 OR nfc_id=20034 OR nfc_id=20035

[netflow_search_rule_20030]
definition = `netflow_index` nfc_id=20030

[netflow_search_rule_20031]
definition = `netflow_index` nfc_id=20031

[netflow_search_rule_20032]
definition = `netflow_index` nfc_id=20032

[netflow_search_rule_20033]
definition = `netflow_index` nfc_id=20033

[netflow_search_rule_20034]
definition = `netflow_index` nfc_id=20034

[netflow_search_rule_20035]
definition = `netflow_index` nfc_id=20035

[netflow_search_rule_20040]
definition = `netflow_index` nfc_id=20040

[all_fields_rule_20011]
definition = bytes_in bytes_out exp_ip flow_smpl_id mask nfc_id packets_in packets_out percent_of_total protocol src_ip subnet _time t_int

[all_fields_rule_20066]
definition = bytes dest_asn exp_ip flow_count flow_smpl_id packets percent_of_total src_asn _time t_int

[all_fields_rule_20065]
definition = bytes_in dest_tos exp_ip flow_count flow_smpl_id packets_in percent_of_total protocol src_tos _time t_int

[all_fields_rule_20064]
definition = bytes bytes_in bytes_out dest_host dest_ip dest_port exp_ip flow_count flow_smpl_id packets_in packets_out percent_of_total protocol src_host src_ip src_port _time t_int

[all_fields_rule_20067]
definition = bytes_in dest_host dest_ip dest_port dest_tos exp_ip flow_count flow_smpl_id input_snmp output_snmp packets_in percent_of_total protocol src_host src_ip src_port src_tos _time t_int

[all_fields_rule_20068]
definition = `all_fields_rule_20067`

[all_fields_rule_20063]
definition = `all_fields_rule_20067`

[all_fields_rule_20017]
definition = avg_time bytes_in bytes_out dest_ip dest_port exp_ip flow_count flow_smpl_id protocol _time t_int

[all_fields_rule_20018]
definition = exp_ip src_ip dest_port user created_count denied_count bytes percent_of_total _time

[all_fields_rule_20019]
definition = exp_ip dest_ip dest_port created_count denied_count bytes percent_of_total _time

[all_fields_rule_20020]
definition = exp_ip src_ip dest_port denied_count _time

[all_fields_rule_20021]
definition = exp_ip src_ip dest_port user created_count _time

[formatbytes(1)]
args = bytes
definition = case($bytes$ > 1073741824, tostring(round($bytes$/1073741824,2))+" GB", $bytes$ > 1048576, tostring(round($bytes$/1048576,2))+" MB", $bytes$ > 1024, tostring(round($bytes$/1024))+" KB", $bytes$ <= 1024, tostring($bytes$)+" Bytes")

[formatbps(1)]
args = bps
definition = case($bps$ > 1000000000, tostring(round($bps$/1000000000,2))+" Gbps", $bps$ > 1000000, tostring(round($bps$/1000000,2))+" Mbps", $bps$ > 1000, tostring(round($bps$/1000,2))+" Kbps", $bps$ <=1000, tostring(ceil($bps$))+" bps")

[formatpps(1)]
args = pps
definition = case($pps$ > 1000000000, tostring(round($pps$/1000000000,2))+" Gpps", $pps$ > 1000000, tostring(round($pps$/1000000,2))+" Mpps", $pps$ > 1000, tostring(round($pps$/1000,2))+" Kpps", $pps$ <=1000, tostring(ceil($pps$))+" pps")

[formatmsec(1)]
args=ms
definition = case($ms$ > 60000, tostring(round($ms$/60000,2))+" min", $ms$ > 1000, tostring(round($ms$/1000,2))+" sec", $ms$ <=1000, tostring(ceil($ms$))+" msec")

[average_speed(2)]
args = result, expression
definition = addinfo | eval $result$ = ($expression$) / (info_max_time - info_min_time)

[per_second_chart(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ | timechart limit=10 $timechart_expr$ useother="f" | foreach * fieldstr="#FIELD#" [ eval #FIELD# = case('#FIELD#'=="_time", _time, '#FIELD#'=="_span", _span, 1==1, '#FIELD#' / _span) ]

[snmp_device_name]
definition = sourcetype="snmp_ta" oid="sysName" earliest=-24h latest=now() | eval short_source=substr(source, 8) | join type=left short_source [ | rest /services/data/inputs/snmp | rename title AS "short_source" | fields short_source destination ] | stats latest(value) as SNMPDeviceName by destination | lookup exporters_devices_lookup management_ip AS destination OUTPUT exp_ip as exp_ip | eval exp_ip = if(exp_ip == "unknown", destination, exp_ip)

[sampling(1)]
args = param
definition = lookup sampling_lookup exp_ip flow_smpl_id OUTPUT smpl_int | eval $param$=if(isnull(smpl_int),$param$,$param$*smpl_int)

[get_iface_name(2)]
args = result, param
definition = lookup exporters_devices_lookup exp_ip OUTPUT management_ip | eval management_ip = if(management_ip=="unknown", exp_ip, management_ip) | lookup interfaces_lookup management_ip snmp_index as $param$ OUTPUT if_name as $result$ | lookup snmp_interface_name_lookup  management_ip  snmp_index as $param$ OUTPUT  if_name as SNMPIfaceName$param$ | eval SNMPIfaceName$param$ = if(isnull(SNMPIfaceName$param$), $param$, SNMPIfaceName$param$) | eval $result$ = if($result$ == "unknown", SNMPIfaceName$param$, $result$)

[get_iface_speed(2)]
args = result, param
definition = lookup exporters_devices_lookup exp_ip OUTPUT management_ip | eval management_ip = if(management_ip=="unknown", exp_ip, management_ip) | lookup interfaces_lookup management_ip snmp_index as $param$ OUTPUT if_speed as $result$ | lookup snmp_interface_speed_lookup management_ip  snmp_index as $param$ OUTPUT  if_speed as SNMPIfaceSpeed$param$ | eval SNMPIfaceSpeed$param$ = if(isnull(SNMPIfaceSpeed$param$), "SNMP query failed", SNMPIfaceSpeed$param$) | eval $result$ = if($result$ == "unknown", SNMPIfaceSpeed$param$, $result$)

[get_exporter_name(1)]
args = result
definition = join type=left exp_ip [ search `snmp_device_name` ] | eval $result$ = if(isnull(SNMPDeviceName), exp_ip, SNMPDeviceName) | eval $result$=if(($result$==exp_ip),exp_ip,exp_ip." (".$result$.")")

[format_traffic_column(3)]
args = result, amount, speed
definition = eval $amount$ = `formatbytes($amount$)` | eval $speed$ = `formatbps($speed$)` | strcat $speed$ "(" $amount$ ")" $result$

[format_packets_column(3)]
args = result, amount, speed
definition = eval $amount$ = tostring($amount$, "commas") | eval $speed$ = `formatpps($speed$)` | strcat $speed$ "(" $amount$ ")" $result$ 

[format_port_column(2)]
args = result, port
definition = lookup port_lookup port AS $port$ OUTPUT service AS service | strcat $port$ "/" protocol_name " (" service ")" $result$ 

[conversation]
definition = `get_iface_name(input_iface, input_snmp)` | `get_iface_name(output_iface, output_snmp)`  | fillnull value="" src_host dest_host | stats sum(bytes_in) AS TrafficAmount sum(packets_in) AS PacketsAmount sum(flow_count) AS Connections by src_ip dest_ip src_host dest_host src_port dest_port protocol_name exp_ip input_iface output_iface | `average_speed(TrafficSpeed, TrafficAmount*8)` | `average_speed(PacketsSpeed, PacketsAmount)` | sort 0 - TrafficAmount | head 100 | `format_traffic_column(Traffic, TrafficAmount, TrafficSpeed)` | `format_packets_column(Packets, PacketsAmount, PacketsSpeed)` | lookup protocol_lookup protocol AS protocol | `format_port_column(src_port_string, src_port)` | `format_port_column(dest_port_string, dest_port)` | `get_exporter_name(exp_ip_name)` | table exp_ip_name src_ip src_host src_port_string dest_ip dest_host dest_port_string input_iface output_iface Traffic Packets Connections | rename exp_ip_name as "Device" | rename src_ip as "Source IP" | rename src_host as "Source Host" | rename src_port_string as "Source Port" | rename dest_ip as "Destination IP" | rename dest_host as "Destination Host" | rename dest_port_string as "Destination Port" | rename input_iface as "Input Interface" | rename output_iface as "Output Interface" | rename Traffic as "Average Traffic Rate (Total Traffic)" | rename Packets as "Average Packet Rate (Total Packets)"

[devices_table(1)]
args = sort_type
definition =  stats sum(bytes_in) AS TrafficAmount sum(packets_in) AS PacketsAmount sparkline(sum(bytes_in)) as TrafficLine sparkline(sum(packets_in)) as PacketsLine by exp_ip | `average_speed(TrafficSpeed, TrafficAmount*8)` | `average_speed(PacketsSpeed, PacketsAmount)` | sort 0 - $sort_type$ | head 100 | eval TrafficSpeed = `formatbps(TrafficSpeed*2)` | eval PacketsSpeed = `formatpps(PacketsSpeed*2)` | `get_exporter_name(exp_ip_name)` | table exp_ip_name TrafficSpeed TrafficLine PacketsSpeed PacketsLine | rename exp_ip_name as "Device" | rename TrafficLine as "Traffic Line" | rename PacketsLine as "Packets Line" | rename TrafficSpeed as "Average Traffic Rate" | rename PacketsSpeed as "Average Packet Rate"

[format_ip_column(3)]
args = result, ip, host
definition =  eval $result$=if(isnull($host$),$ip$,$ip$." (".$host$.")")

[fix_dest_ip_mapping]
definition =  rex field=_raw "(?i) dest_ip=(?P<destip>[^ ]+) " | eval dest_ip=if(dest_ip==dest_host,destip,dest_ip) 

[fix_src_ip_mapping]
definition =  rex field=_raw "(?i) src_ip=(?P<srcip>[^ ]+) " | eval src_ip=if(src_ip==src_host,srcip,src_ip)

