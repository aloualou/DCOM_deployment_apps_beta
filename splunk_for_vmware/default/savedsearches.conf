#Copyright (C) 2005-2014 Splunk Inc. All Rights Reserved.
[vProb errors in logs]
search = sourcetype="vmware:*log*" error "vProb*"
dispatch.earliest_time = -4h
dispatch.latest_time = now

[vmfs volume locked]
search = sourcetype="vmware:*log*" vmfs volume locked
dispatch.earliest_time = -4h
dispatch.latest_time = now

[All paths are dead]
search = sourcetype="vmware:*log*" "APD"
dispatch.earliest_time = -4h
dispatch.latest_time = now

[Duplicate IPs]
search = sourcetype=vmware:esx*:* "duplicate IP"
dispatch.earliest_time = -4h
dispatch.latest_time = now

[SCSI reservation error - i/o failed]
search = sourcetype="vmware:*log*" "SCSI reservation error - i/o failed"
dispatch.earliest_time = -4h
dispatch.latest_time = now

[Lost connectivity]
search = sourcetype="vmware:*log*" "Lost connectivity"
dispatch.earliest_time = -4h
dispatch.latest_time = now

[vCenter starts]
search = `VcLogSourcetypes` "Starting * VirtualCenter"
dispatch.earliest_time = -7d
dispatch.latest_time = now

[d_proactivemonitoring_panel1_parent_vm]
disabled = true
is_visible = false
search = index=summary_vmware source="SummaryVirtMachinePerfByMeidInstance1hour*" [| stats count | eval $parent_gate$ | lookup FullHierarchy meid OUTPUT hostsystemmeid clustermeid vc | eval hostsystemmeid=if(match(hostsystemmeid,":N/A$"),"*",hostsystemmeid) | eval clustermeid=if(match(clustermeid,":N/A$"),"*",clustermeid) | table clustermeid vc hostsystemmeid] $fields.fields$=* perftype=$perftype.perftype$ earliest=-24h | `StrictBucket($fields.fields$,10,$max_gate$)` | stats count by binIndex

[d_proactivemonitoring_panel1_parent_host]
disabled = true
is_visible = false
search = index=summary_vmware source="SummaryHostSystemPerfByMeidInstance1hour*" [| stats count | eval $parent_gate$ | lookup FullHierarchy meid OUTPUT hostsystemmeid clustermeid vc | eval hostsystemmeid=if(match(hostsystemmeid,":N/A$"),"*",hostsystemmeid) | eval clustermeid=if(match(clustermeid,":N/A$"),"*",clustermeid) | table clustermeid vc hostsystemmeid] $fields.fields$=* perftype=$perftype.perftype$ earliest=-24h | `StrictBucket($fields.fields$,10,$max_gate$)` | stats count by binIndex

[d_proactivemonitoring_panel1_vm]
disabled = true
is_visible = false
search = | `tstats` $metric.command$($metric.pmetric$) max($metric.pmetric$) from $perftype.tsidxnamespace$ where instance="aggregated" groupby host, moid | stats $metric.command$($metric.pmetric$) AS $metric.pmetric$ max($metric.pmetric$) as maxvalue by host, moid | thresholdlookup entitytype=$leaf.threshold_target$,perftype=$perftype.perftype$,metric=$metric.pmetric$ match=false | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT name, parent, type | fields - _time | eval perfdata=1 | append [| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHierarchy" | search type=virtualmachine OR type=hostsystem OR type=clustercomputeresource OR type=RootFolder | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT parentType as realParentType | eval parent=if(type=="ClusterComputeResource" OR realParentType=="ComputeResource" OR type=="RootFolder",if(type=="RootFolder","none",rootFolderMoid), uiparent) | fields - _time | fields name host moid parent type] | eval metric="$metric.metric$" | eval parent=if(isnull(perfdata),parent,null()) | stats first(name) as name first(threshold_severity) as threshold_severity first($metric.pmetric$) as $metric.pmetric$ first(maxvalue) as maxvalue first(parent) as parent by host moid type metric | eval threshold_severity=if(isnull(threshold_severity),if(type="$leaf.threshold_target$","unknown",threshold_severity),threshold_severity)| eval critical=if(threshold_severity="critical",1,False()) | eval warning=if(threshold_severity="warning",1,False()) | eval normal=if(threshold_severity="normal",1,False())| eval unknown=if(threshold_severity="unknown",1,False()) | eval valid=if($vmw_proactive_monitoring_showall$==1, 1, if(isnull($metric.pmetric$) AND type=="$leaf.threshold_target$", 0, 1)) | search valid=1 | fields - valid | eval id=host+"-"+moid | eval parent=if(parent=="none",parent,host+"-"+parent) | eventstats max(maxvalue) as max

[d_proactivemonitoring_panel1_vm_sum]
disabled = true
is_visible = false
search = | `tstats` perc95($metric.pmetric$) max($metric.pmetric$) from $perftype.tsidxnamespace$ where instance="aggregated" groupby host, moid | stats perc95($metric.pmetric$) AS $metric.pmetric$ max($metric.pmetric$) as maxvalue by host, moid | thresholdlookup entitytype=$leaf.threshold_target$,perftype=$perftype.perftype$,metric=$metric.pmetric$ match=false | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT name, parent, type | fields - _time | eval perfdata=1 | append [| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHierarchy" | search type=virtualmachine OR type=hostsystem OR type=clustercomputeresource OR type=RootFolder | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT parentType as realParentType | eval parent=if(type=="ClusterComputeResource" OR realParentType=="ComputeResource" OR type=="RootFolder",if(type=="RootFolder","none",rootFolderMoid), uiparent) | fields - _time | fields name host moid parent type] | eval metric="$metric.metric$" | eval parent=if(isnull(perfdata),parent,null()) | stats first(name) as name first(threshold_severity) as threshold_severity first($metric.pmetric$) as $metric.pmetric$ first(maxvalue) as maxvalue first(parent) as parent by host moid type metric | eval threshold_severity=if(isnull(threshold_severity),if(type="$leaf.threshold_target$","unknown",threshold_severity),threshold_severity)| eval critical=if(threshold_severity="critical",1,False()) | eval warning=if(threshold_severity="warning",1,False()) | eval normal=if(threshold_severity="normal",1,False())| eval unknown=if(threshold_severity="unknown",1,False()) | eval valid=if($vmw_proactive_monitoring_showall$==1, 1, if(isnull($metric.pmetric$) AND type=="$leaf.threshold_target$", 0, 1)) | search valid=1 | fields - valid | eval id=host+"-"+moid | eval parent=if(parent=="none",parent,host+"-"+parent) | eventstats max(maxvalue) as max

[d_proactivemonitoring_panel1_host]
disabled = true
is_visible = false
search = | `tstats` $metric.command$($metric.pmetric$) max($metric.pmetric$) from $perftype.tsidxnamespace$ where instance="aggregated" groupby host, moid | stats $metric.command$($metric.pmetric$) AS $metric.pmetric$ max($metric.pmetric$) as maxvalue by host, moid | thresholdlookup entitytype=$leaf.threshold_target$,perftype=$perftype.perftype$,metric=$metric.pmetric$ match=false | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT name, parent, type | fields - _time | eval perfdata=1 | append [| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHierarchy" | search type=hostsystem OR type=clustercomputeresource OR type=RootFolder | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT parentType as realParentType | eval parent=if(type=="ClusterComputeResource" OR realParentType=="ComputeResource" OR type=="RootFolder",if(type=="RootFolder","none",rootFolderMoid), uiparent) | fields - _time | fields name host moid parent type] | eval metric="$metric.metric$" | eval parent=if(isnull(perfdata),parent,null()) | stats first(name) as name first(threshold_severity) as threshold_severity first($metric.pmetric$) as $metric.pmetric$ first(maxvalue) as maxvalue first(parent) as parent by host moid type metric | eval threshold_severity=if(isnull(threshold_severity),if(type="$leaf.threshold_target$","unknown",threshold_severity),threshold_severity)| eval critical=if(threshold_severity="critical",1,False()) | eval warning=if(threshold_severity="warning",1,False()) | eval normal=if(threshold_severity="normal",1,False())| eval unknown=if(threshold_severity="unknown",1,False()) | eval valid=if($vmw_proactive_monitoring_showall$==1, 1, if(isnull($metric.pmetric$) AND type=="$leaf.threshold_target$", 0, 1)) | search valid=1 | fields - valid | eval id=host+"-"+moid | eval parent=if(parent=="none",parent,host+"-"+parent) | eventstats max(maxvalue) as max

[d_proactivemonitoring_panel1_host_sum]
disabled = true
is_visible = false
search = | `tstats` perc95($metric.pmetric$) max($metric.pmetric$) from $perftype.tsidxnamespace$ where instance="aggregated" groupby host, moid | stats perc95($metric.pmetric$) AS $metric.pmetric$ max($metric.pmetric$) as maxvalue by host, moid | thresholdlookup entitytype=$leaf.threshold_target$,perftype=$perftype.perftype$,metric=$metric.pmetric$ match=false | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT name, parent, type | fields - _time | eval perfdata=1 | append [| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHierarchy" | search type=hostsystem OR type=clustercomputeresource OR type=RootFolder | `SetHandleInfoMaxTimeNow` | lookup FullHierarchy host, moid OUTPUT parentType as realParentType | eval parent=if(type=="ClusterComputeResource" OR realParentType=="ComputeResource" OR type=="RootFolder",if(type=="RootFolder","none",rootFolderMoid), uiparent) | fields - _time | fields name host moid parent type] | eval metric="$metric.metric$" | eval parent=if(isnull(perfdata),parent,null()) | stats first(name) as name first(threshold_severity) as threshold_severity first($metric.pmetric$) as $metric.pmetric$ first(maxvalue) as maxvalue first(parent) as parent by host moid type metric | eval threshold_severity=if(isnull(threshold_severity),if(type="$leaf.threshold_target$","unknown",threshold_severity),threshold_severity)| eval critical=if(threshold_severity="critical",1,False()) | eval warning=if(threshold_severity="warning",1,False()) | eval normal=if(threshold_severity="normal",1,False())| eval unknown=if(threshold_severity="unknown",1,False()) | eval valid=if($vmw_proactive_monitoring_showall$==1, 1, if(isnull($metric.pmetric$) AND type=="$leaf.threshold_target$", 0, 1)) | search valid=1 | fields - valid | eval id=host+"-"+moid | eval parent=if(parent=="none",parent,host+"-"+parent) | eventstats max(maxvalue) as max

[d_proactivemonitoring_panel1_vm_pulldown]
disabled = true
is_visible = false
search = | metasearch source="VMPerf:VirtualMachine" | streamstats range(_time) AS rangetime | head (rangetime<900) | stats values(sourcetype) AS perftype | mvexpand perftype | search perftype!="*virtualDisk*" | eval perftype=replace(perftype,"vmware:perf:","") | eval tsidxnamespace="vmw_perf_" + perftype + "_virtualmachine" | fields perftype,tsidxnamespace

[d_proactivemonitoring_panel1_host_pulldown]
disabled = true
is_visible = false
search = | metasearch source="VMPerf:HostSystem" | streamstats range(_time) AS rangetime | head (rangetime<900) | stats values(sourcetype) AS perftype | mvexpand perftype | search perftype!="*virtualDisk*" | eval perftype=replace(perftype,"vmware:perf:","") | eval tsidxnamespace="vmw_perf_" + perftype + "_hostsystem" | fields perftype,tsidxnamespace


#Host Detail Dashboard Searches/PostProcesses

[d_host_detail_row1_PerfThresholds]
disabled = true
is_visible = false
search = sourcetype=vmware:perf source=HostSystemPerf (perftype=cpu OR perftype=mem) $selectedHost$ | chart avg(AvgUsg_pct) over meid by perftype | rename cpu AS AvgUsg_pct | thresholdlookup entitytype=HostSystem,perftype=cpu,metric=AvgUsg_pct | rename AvgUsg_pct AS AvgUsg_pct_cpu threshold_severity AS cpu_threshold | rename mem AS AvgUsg_pct | thresholdlookup entitytype=HostSystem,perftype=mem,metric=AvgUsg_pct | rename AvgUsg_pct AS AvgUsg_pct_mem threshold_severity as mem_threshold | fillnull value="Not Available" AvgUsg_pct_cpu, AvgUsg_pct_mem, cpu_threshold, mem_threshold

[d_host_detail_row1_PerfThresholds_null]
disabled = true
is_visible = false
search = | stats count | eval AvgUsg_pct_cpu = "Not Available" | eval AvgUsg_pct_mem = "Not Available" | eval cpu_threshold = "Unknown" | eval mem_threshold = "Unknown" | fields - count

[d_host_detail_row1_InvInfo]
disabled = true
is_visible = false
search = sourcetype="vmware:inv:hostsystem" earliest=1 | spath moid output=moid | spath changeSet.name output=name | search $selectedHostSystem$ | spath collectionVersion output=collectionVersion | spath changeSet.summary.overallStatus output=overallStatus | spath changeSet.summary.quickStats.overallCpuUsage output=overallCpuUsage | spath changeSet.summary.quickStats.overallMemoryUsage output=overallMemoryUsage | spath changeSet.summary.hardware.cpuMhz output=cpuMhz | spath changeSet.summary.hardware.memorySize output=memorySize | spath changeSet.summary.hardware.numCpuCores output=CPUCores | spath changeSet.summary.hardware.vendor output=manufacturer | spath changeSet.summary.hardware.model output=model | spath changeSet.summary.hardware.numNics output=numNics | spath changeSet.summary.hardware.cpuModel output=processorType | spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs | spath changeSet.summary.hardware.numCpuThreads output=logicalProcessor | spath changeSet.config.hyperThread.active output=active | spath changeSet.summary.host.moid output=HostSystem | spath changeSet.parent.moid output=HostSystemParent | spath changeSet.parent.type output=HostSystemParentType | head (collectionVersion!=1) keeplast=t | stats first(overallStatus) As overallStatus  first(manufacturer) As Manufacturer first(model) As Model first(numNics) As NumberofNICs first(logicalProcessor) As LogicalProcessors first(processorType) As ProcessorType first(numCpuPkgs) As ProcessorSockets first(overallMemoryUsage) AS MemUsg first(overallCpuUsage) AS CpuUsg first(cpuMhz) AS MhzPerCore first(memorySize) AS Mem first(CPUCores) as CPUCores  first(name) As Host first(HostSystem) AS HostSystem first(HostSystemParent) As HostSystemParent first(HostSystemParentType) As HostSystemParentType first(active) as active by moid, host| eval MaxCpuMhz=MhzPerCore*CPUCores | eval MaxMemMB=((Mem/1024)/1024) | eval FreeMem=MaxMemMB-MemUsg | eval FreeCpu=MaxCpuMhz-CpuUsg |  eval CoresperSocket=CPUCores/ProcessorSockets |  eval Hyperthreading=if(active="True", "Active", "Inactive") | eval ClusterMoid=if(HostSystemParentType="ClusterComputeResource", HostSystemParent, "N/A") |  lookup Entity host, moid AS ClusterMoid OUTPUT name AS Cluster |fillnull value="N/A"  overallStatus, Manufacturer, Model, NumberofNICs,LogicalProcessors,ProcessorType, ProcessorSockets, MemUsg, CpuUsg, MhzPerCore, Mem, CPUCores,Host,HostSystem,HostSystemParent, HostSystemParentType, Cluster, ClusterMoid, CoresperSocket, FreeCpu, FreeMem, Hyperthreading, MaxCpuMhz, MaxMemMB|  fields - count

[d_host_detail_row1_InvInfo_null]
disabled = true
is_visible = false
search = | stats count | eval overallStatus="Not Available" | eval Manufacturer="Not Available" | eval Model="Not Available" | eval NumberofNICs="Not Available" | eval LogicalProcessors="Not Available" | eval ProcessorType="Not Available"| eval ProcessorSockets="Not Available" | eval MemUsg="Not Available" | eval CpuUsg="Not Available" | eval MhzPerCore="Not Available"  | eval Mem="Not Available" | eval CPUCores="Not Available" | eval Host="Not Available"  | eval HostSystem="Not Available" |  eval HostSystemParent="Not Available" | eval HostSystemParentType="Not Available" |  eval Cluster="Not Available" |  eval ClusterMoid="Not Available" |  eval ProcessorSockets="Not Available" | eval CoresperSocket="Not Available" | eval FreeCpu="Not Available" | eval FreeMem="Not Available" | eval Hyperthreading="Not Available" | eval MaxCpuMhz="Not Available" | eval MaxMemMB="Not Available" |  fields - count

[d_host_detail_row1_InvStatusInfo]
disabled = true
is_visible = false
search = $selectedHost$ sourcetype="vmware:inv" overallStatus=* earliest=-2h | head 1 | fillnull value="Not Available" overallStatus | table overallStatus

[d_host_detail_row1_InvStatusInfo_null]
disabled = true
is_visible = false
search = | stats count | eval overallStatus="Not Available" | fields - count

[d_host_detail_row1_FreeCpuMem]
disabled = true
is_visible = false
search = $selectedHost$ (sourcetype="vmware:inv" source=HostHardwareSummary) OR (sourcetype="vmware:inv" source="HostListSummaryQuickStats") earliest=-2h | stats first(overallMemoryUsage) AS MemUsg first(overallCpuUsage) AS CpuUsg first(cpuMhz) AS MhzPerCore first(memorySize) AS Mem first(numCpuCores) as NumCores | eval MaxCpuMhz=MhzPerCore*NumCores | eval MaxMemMB=((Mem/1024)/1024) | eval FreeMem=MaxMemMB-MemUsg | eval FreeCpu=MaxCpuMhz-CpuUsg | fillnull value="Not Available" MemUsg, CpuUsg, MhzPerCore, Mem, NumCores, FreeCpu, FreeMem, MaxCpuMhz, MaxMemMB

[d_host_detail_row1_FreeCpuMem_null]
disabled = true
is_visible = false
search = | stats count | eval MemUsg="Not Available" | eval CpuUsg="Not Available" | eval MhzPerCore="Not Available" | eval Mem="Not Available" | eval NumCores="Not Available" | eval FreeCpu="Not Available" | eval FreeMem="Not Available" | eval MaxCpuMhz="Not Available" | eval MaxMemMB="Not Available" | fields - count

[d_host_detail_row1_DatastoreInfo]
disabled = true
is_visible = false
search = source="VMInv:HostSystem" earliest=1 | spath moid | spath collectionVersion | search host=$selectedHostSystem.host$ AND moid=$selectedHostSystem.moid$ | spath changeSet.datastore.ManagedObjectReference{}.moid  output=dsmoid | spath changeSet.name output=moname | head (collectionVersion!=1) keeplast=t | mvexpand dsmoid | lookup TimeDatastoreSummary moid as dsmoid OUTPUT name  | table dsmoid name host | rename name as Datastore dsmoid as HIDE-Datastore-moid host as HIDE-Datastore-host | sort Datastore

[d_host_detail_row2_VMPowerInfo_base]
disabled = true
is_visible = false
search= sourcetype="vmware:inv:vm" earliest=-6h | search host=$selectedHostSystem.host$ | spath moid | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.summary.runtime.host.moid output=hmoid | stats first(powerState) as PowerState, first(_time) as _time first(hmoid) as hmoid by moid, host | search hmoid=$selectedHostSystem.moid$ | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine |rename moid as HIDE-VirtualMachine-moid, host as HostSystem, hmoid as HIDE-HostSystem-moid, host as HIDE-HostSystem | stats count as TotalVMs, count(eval(PowerState="poweredOn")) as PoweredOn, count(eval(PowerState="poweredOff")) as PoweredOff

[d_host_detail_row2_VMMigrationInfo_to_off]
disabled = true
is_visible = false
search= sourcetype=vmware:inv:hierarchy | spath moid | spath type | search type="VirtualMachine" | spath changeSet.runtime.host.moid output=hostsystemmoid | table _time, moid, host, hostsystemmoid | sort 0 + _time | streamstats first(hostsystemmoid) as prev_hostsystem window=1 global=f current=f by moid host | sort 0 - _time | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | lookup FullHierarchy moid AS hostsystemmoid, host AS host OUTPUT name AS HostSystem | lookup FullHierarchy moid AS prev_hostsystem, host AS host OUTPUT name AS FirstHostSystem | search host=$selectedHostSystem.host$ AND (hostsystemmoid=$selectedHostSystem.moid$ OR prev_hostsystem=$selectedHostSystem.moid$)|  stats count(eval(hostsystemmoid=$selectedHostSystem.moid$ AND prev_hostsystem!=$selectedHostSystem.moid$)) As MigratedTo, count(eval(hostsystemmoid!=$selectedHostSystem.moid$  AND prev_hostsystem=$selectedHostSystem.moid$)) As MigratedOff |table MigratedTo MigratedOff

[d_host_detail_row2_TotalVM]
disabled = true
is_visible = false
search = sourcetype="vmware:inv:vm" earliest=-6h | search host=$selectedHostSystem.host$ | spath moid | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.summary.runtime.host.moid output=hmoid | stats first(powerState) as PowerState, first(_time) as _time first(hmoid) as hmoid by moid, host | search hmoid=$selectedHostSystem.moid$ | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename moid as HIDE-VirtualMachine-moid, host as HostSystem, hmoid as HIDE-HostSystem-moid, host as HIDE-HostSystem-host

[d_host_detail_row2_PoweredOnVM]
disabled = true
is_visible = false
search = sourcetype="vmware:inv:vm" earliest=-6h | search host=$selectedHostSystem.host$ | spath moid | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.summary.runtime.host.moid output=hmoid | stats first(powerState) as PowerState, first(_time) as _time first(hmoid) as hmoid by moid, host | search hmoid=$selectedHostSystem.moid$ | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename moid as HIDE-VirtualMachine-moid, host as HostSystem, hmoid as HIDE-HostSystem-moid, host as HIDE-HostSystem-host | search PowerState="poweredOn"  

[d_host_detail_row2_PoweredOffVM]
disabled = true
is_visible = false
search =sourcetype="vmware:inv:vm" earliest=-6h | search host=$selectedHostSystem.host$ | spath moid | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.summary.runtime.host.moid output=hmoid | stats first(powerState) as PowerState, first(_time) as _time first(hmoid) as hmoid by moid, host | search hmoid=$selectedHostSystem.moid$ | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename moid as HIDE-VirtualMachine-moid, host as HostSystem, hmoid as HIDE-HostSystem-moid, host as HIDE-HostSystem-host |  search PowerState="poweredOff"   

[d_host_detail_row2_MigratedOffVM]
disabled = true
is_visible = false
search= sourcetype=vmware:inv:hierarchy | spath moid | spath type | search type="VirtualMachine" | spath changeSet.runtime.host.moid output=hostsystemmoid | table _time, moid, host, hostsystemmoid | sort 0 + _time | streamstats first(hostsystemmoid) as prev_hostsystem window=1 global=f current=f by moid host | sort 0 - _time | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | lookup FullHierarchy moid AS hostsystemmoid, host AS host OUTPUT name AS HostSystem | lookup FullHierarchy moid AS prev_hostsystem, host AS host OUTPUT name AS FirstHostSystem | search host=$selectedHostSystem.host$ AND (hostsystemmoid!=$selectedHostSystem.moid$ AND prev_hostsystem=$selectedHostSystem.moid$) | rename hostsystemmoid as HIDE-HostSystem-moid, host as HIDE-HostSystem-host, moid as HIDE-VirtualMachine-moid, prev_hostsystem as HIDE-FirstHostSystem-moid 

[d_host_detail_row2_MigratedToVM]
disabled = true
is_visible = false
search= sourcetype=vmware:inv:hierarchy | spath moid | spath type | search type="VirtualMachine" | spath changeSet.runtime.host.moid output=hostsystemmoid | table _time, moid, host, hostsystemmoid | sort 0 + _time | streamstats first(hostsystemmoid) as prev_hostsystem window=1 global=f current=f by moid host | sort 0 - _time | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | lookup FullHierarchy moid AS hostsystemmoid, host AS host OUTPUT name AS HostSystem | lookup FullHierarchy moid AS prev_hostsystem, host AS host OUTPUT name AS FirstHostSystem | search host=$selectedHostSystem.host$ AND (hostsystemmoid=$selectedHostSystem.moid$ AND prev_hostsystem!=$selectedHostSystem.moid$) | rename hostsystemmoid as HIDE-HostSystem-moid, host as HIDE-HostSystem-host, moid as HIDE-VirtualMachine-moid, prev_hostsystem as HIDE-FirstHostSystem-moid 

[d_host_detail_row3_RecentEvents]
disabled = true
is_visible = false
search = (sourcetype="vmware:events" OR sourcetype="vmware:tasks") host=$selectedHostSystem.host$ | spath host.host.moid output=emoid | spath entity.moid output=tmoid | search (emoid=$selectedHostSystem.moid$ OR tmoid=$selectedHostSystem.moid$) | spath descriptionId | eval Message=if(isnull(tmoid), fullFormattedMessage, descriptionId ) | eval User=replace(source,"Username:","") | table _time, Message, User | head 150

[d_host_detail_row3_RecentLogError]
disabled = true
is_visible = false
search = sourcetype="vmware:esxlog:*" [| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHostDetail" | search $selectedHostSystem$ | eval host=Host + "*" | table host] | head 150 | eval Time=_time | convert ctime(Time) | table Time, host, Message

[d_host_detail_row4_PerfTypePulldown_base]
disabled = true
is_visible = false
search = | inputlookup HSInstanceList | search $selectedHost$ | makemv delim="|" instance_list | mvexpand instance_list | stats values(instance_list) as instance values(meid) as meid by perftype | mvexpand instance | eval isInstance = if(instance="Aggregated","no","yes") | `HandleInfoMaxTime` | eval _time=info_max_time | lookup HSFieldList meid perftype instance AS isInstance OUTPUT fields | `makemv(fields)` | mvexpand fields | fields - info_max_time,- info_min_time,- info_search_time,- info_sid, - isInstance

[d_host_detail_row4_PerfTypePulldown_base_null]
disabled = true
is_visible = false
search = | stats count | eval fields="Not Available" | eval instance="Not Available" | eval perftype="Not Available"

[d_host_detail_row4_PerfTypePulldown]
disabled = true
is_visible = false
search = | stats values(perftype) as perftype | mvexpand perftype

[d_host_detail_row4_InstancePulldown]
disabled = true
is_visible = false
search = | search perftype="$perftype.perftype$" | stats values(instance) as instance | mvexpand instance

[d_host_detail_row4_FieldsPulldown]
disabled = true
is_visible = false
search = | search perftype="$perftype.perftype$" instance="$instance.instance$"

[d_host_detail_row4_LineChart_Thresholds]
disabled = true
is_visible = false
search = |stats count | thresholdlookup entitytype=HostSystem,perftype="$perftype.perftype$",metric="$fields.fields$" match=true | fields - threshold_severity, - threshold_comparator | rename threshold_warnlevel AS Warning, threshold_critlevel AS Critical

[d_host_detail_row4_LineChart]
disabled = true
is_visible = false
search = sourcetype="vmware:perf" source="HostSystemPerf" perftype="$perftype.perftype$" $selectedHost$ | eval instance=if(isnotnull(instance),instance,"Aggregate") | eval HostSystem=host | timechart minspan=20s $chartfun.chartfunval$($fields.fields$) AS $fields.fields$ | eval Critical=$Thresholds[0].Critical$ | eval Warning=$Thresholds[0].Warning$

#VM Detail Dashboard Searches/PostProcesses
[d_vm_detail_row1_VMData]
disabled = true
is_visible = false
search = sourcetype="vmware:inv:vm" earliest=1 | spath moid output=moid | search $selectedVirtualMachine$ |spath collectionVersion output=collectionVersion | spath changeSet.name output=name | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.config.guestFullName output=guestFullName | spath changeSet.guest.toolsStatus output=toolsStatus | spath changeSet.config.hardware.numCPU output=numCPU | spath changeSet.config.hardware.numCoresPerSocket output=numCoresPerSocket | spath changeSet.config.hardware.memoryMB output=memorySizeMB | spath changeSet.resourceConfig.cpuAllocation.reservation output=cpuReservation | spath changeSet.resourceConfig.memoryAllocation.reservation output=memoryReservation | spath changeSet.resourceConfig.memoryAllocation.shares.level output=memSharesLevel | spath changeSet.resourceConfig.memoryAllocation.shares.shares output=memSharesShares | spath changeSet.resourceConfig.cpuAllocation.shares.level output=cpuSharesLevel | spath changeSet.resourceConfig.cpuAllocation.shares.shares output=cpuSharesShares | spath changeSet.summary.runtime.host.moid output=HostSystem | head (collectionVersion!=1) keeplast=t | stats first(name) AS name, first(powerState) AS powerState, first(numCPU) AS numCPU, first(guestFullName) AS guestFullName, first(toolsStatus) AS toolsStatus, first(numCoresPerSocket) AS numCoresPerSocket, first(memorySizeMB) AS memorySizeMB, first(cpuReservation) AS cpuReservation, first(memoryReservation) AS memoryReservation, first(memSharesLevel) AS memSharesLevel, first(memSharesShares) AS memSharesShares, first(cpuSharesLevel) AS cpuSharesLevel, first(cpuSharesShares) AS cpuSharesShares, first(HostSystem) AS HostSystem first(_time) AS _time by moid, host  | lookup FullHierarchy moid as HostSystem, host as host OUTPUT name as HostSystemName, parent as HostSystemParent, parentType AS HostSystemParentType | eval ClusterMoid=if(HostSystemParentType="ClusterComputeResource", HostSystemParent, "N/A") | lookup FullHierarchy moid AS ClusterMoid OUTPUT name AS ClusterName | fillnull value="Not Available" name powerState numCoresPerSocket memorySizeMB ClusterName HostSystem | fillnull value="N/A" cpuSharesShares memSharesShares memoryReservation cpuReservation numCPU HostSystemName | eval cpuSharesLevel=if(isnull(cpuSharesLevel), "N/A", cpuSharesLevel) | eval memSharesLevel=if(isnull(memSharesLevel), "N/A", memSharesLevel) | eval guestFullName=if(isnull(guestFullName), "N/A", guestFullName) | eval toolsStatus=if(isnull(toolsStatus), "Not Available", toolsStatus) 

[d_vm_detail_row1_VMData_null]
disabled = true
is_visible = false
search = | stats count | eval Cluster="Not Available" | eval Datacenter="Not Available" | eval HostSystem="Not Available" | eval MOR="Not Available" | eval alarmActionsEnabled="Not Available" | eval appHeartbeatStatus="Not Available" | eval bootTime="Not Available" | eval clustermeid="Not Available" | eval configStatus="Not Available" | eval connectionState="Not Available" | eval consolidationNeeded="Not Available" | eval cpuAllocation="Not Available" | eval cpuReservation="Not Available" | eval datacentermeid="Not Available" | eval faultToleranceState="Not Available" | eval guestFamily="Not Available" | eval guestFullName="Not Available" | eval guestHeartbeatStatus="Not Available" | eval guestId="Not Available" | eval guestOperationsReady="Not Available" | eval guestState="Not Available" | eval host="Not Available" | eval hostName="Not Available" | eval hostsystemmeid="Not Available" | eval installBootRequired="Not Available" | eval instanceUuid="Not Available" | eval interactiveGuestOperationsReady="Not Available" | eval isvc="Not Available" | eval maxCpuUsage="Not Available" | eval maxMemoryUsage="Not Available" | eval meid="Not Available" | eval memoryAllocation="Not Available" | eval memoryOverhead="Not Available" | eval memoryReservation="Not Available" | eval memorySizeMB="Not Available" | eval moname="Not Available" | eval name="Not Available" | eval numCPU="Not Available" | eval numCoresPerSocket="Not Available" | eval numCpu="Not Available" | eval numEthernetCards="Not Available" | eval numMksConnections="Not Available" | eval numVirtualDisks="Not Available" | eval overallStatus="Not Available" | eval powerState="Not Available" | eval recordReplayState="Not Available" | eval screen="Not Available" | eval suspendInterval="Not Available" | eval template="Not Available" | eval toolsInstallerMounted="Not Available" | eval toolsRunningStatus="Not Available" | eval toolsStatus="Not Available" | eval toolsVersion="Not Available" | eval toolsVersionStatus="Not Available" | eval toolsVersionStatus2="Not Available" | eval type="Not Available" | eval typeduipath="Not Available" | eval uuid="Not Available" | eval vc="Not Available" | eval vmPathName="Not Available" | eval name="Not Available" | eval powerState="Not Available" | eval numCoresPerSocket="Not Available" | eval memorySizeMB="N/A"| eval ClusterName="Not Available" | eval numCPU=if(isnull(numCPU), "Not Available", numCPU) | eval toolsStatus="Not Available" | eval memorySizeMB="N/A" | eval cpuReservation="N/A" | eval memoryReservation="N/A" | eval memSharesLevel="Not Available" | eval memSharesShares="N/A" | eval cpuSharesLevel="Not Available" | eval cpuSharesShares="N/A" | eval HostSystemName="Not Available" | fields - count

[d_vm_detail_row1_datastore_base]
disabled = true
is_visible = false
search = sourcetype="vmware:inv:vm" earliest=1 | spath collectionVersion | spath moid | search $selectedVirtualMachine$ | head (collectionVersion!=1) keeplast=t | spath changeSet.storage.perDatastoreUsage{}.datastore.moid output=datastoremoid | search datastoremoid=* | spath changeSet.storage.perDatastoreUsage{}.committed output=committed | spath changeSet.storage.perDatastoreUsage{}.uncommitted output=uncommitted | spath changeSet.storage.perDatastoreUsage{}.unshared output=unshared | table _time, moid, host, datastoremoid, committed, uncommitted, unshared | eval committed=`format_bytes(committed)` | eval uncommitted=`format_bytes(uncommitted)` | eval unshared=`format_bytes(unshared)` | mvexpand datastoremoid | lookup TimeDatastoreSummary moid AS datastoremoid, host AS host OUTPUT path, url, accessible, name AS Datastore | rename host as HIDE-host, datastoremoid AS HIDE-Datastore-moid, committed AS Committed, uncommitted AS Uncommitted, accessible AS Accessible, path AS Path, url AS URL, unshared AS Unshared | fields - _time, moid | dedup HIDE-Datastore-moid | eval "File Information"="[Click to Show]" | fields HIDE-host, HIDE-Datastore-moid, Datastore, Committed, Uncommitted, Unshared, Accessible, Path, URL, "File Information"

[d_vm_detail_row1_datastore_drill]
disabled = true
is_visible = false
search =sourcetype="vmware:inv:vm" earliest=1 | spath collectionVersion | spath moid | search $selectedVirtualMachine$ | head (collectionVersion!=1) keeplast=t | spath changeSet.datastore.ManagedObjectReference{}.moid output=datastoremoid | spath changeSet.layoutEx.file{}.key output=filekey | spath changeSet.layoutEx.file{}.name output=filename | spath changeSet.layoutEx.file{}.size output=filesize | spath changeSet.layoutEx.file{}.type output=filetype | eval combinedfileandsize=mvzip(filename,filesize) | eval combinedfileandsizeandtype=mvzip(combinedfileandsize, filetype) | mvexpand combinedfileandsizeandtype | rex field=combinedfileandsizeandtype "\[(?<filedatastore>.*)\] (?<filename>.*),(?<filesize>\d+),(?<filetype>\w+)" | dedup filename, host | lookup TimeDatastoreSummary name AS filedatastore OUTPUT accessible, capacity, freeSpace, moid AS datastoremoid, path, uncommitted, url |table _time, host, datastoremoid, combinedfileandsizeandtype, accessible, capacity, freeSpace, path, type, uncommitted, url, filedatastore, filename, filesize, filetype 

#Cluster Detail Dashboard Searches/PostProcesses
[d_cluster_detail_row3_TotalHosts]
disabled = true
is_visible = false
search = | rename Host as HostSystem, moid as HIDE-HostSystem-moid, host as HIDE-host, overallStatus as Status, num_vms as "Number of VMs" | table HostSystem, HIDE-host, HIDE-HostSystem-moid, Status, "Number of VMs"

[d_cluster_detail_row3_GreenHosts]
disabled = true
is_visible = false
search = | search overallStatus="green" | rename Host as HostSystem, moid as HIDE-HostSystem-moid, host as HIDE-host, overallStatus as Status, num_vms as "Number of VMs" | table HostSystem, HIDE-host, HIDE-HostSystem-moid, Status, "Number of VMs"

[d_cluster_detail_row3_YellowHosts]
disabled = true
is_visible = false
search = | search overallStatus="yellow" | rename Host as HostSystem, moid as HIDE-HostSystem-moid, host as HIDE-host, overallStatus as Status, num_vms as "Number of VMs" | table HostSystem, HIDE-host, HIDE-HostSystem-moid, Status, "Number of VMs"

[d_cluster_detail_row3_RedHosts]
disabled = true
is_visible = false
search = | search overallStatus="red" | rename Host as HostSystem, moid as HIDE-HostSystem-moid, host as HIDE-host, overallStatus as Status, num_vms as "Number of VMs" | table HostSystem, HIDE-host, HIDE-HostSystem-moid, Status, "Number of VMs"

[d_cluster_detail_AvgOvrhdMemPerVM_KB]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_maximum_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_minimum_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_none_mem_overhead_kiloBytes) from vmw_perf_mem_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_mem_overhead_kiloBytes) as avg_overhead_kb, $chartfun.chartfunval$(p_maximum_mem_overhead_kiloBytes) as max_overhead_kb, $chartfun.chartfunval$(p_minimum_mem_overhead_kiloBytes) as min_overhead_kb, $chartfun.chartfunval$(p_none_mem_overhead_kiloBytes) as none_overhead_kb | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=coalesce(avg_overhead_kb,max_overhead_kb,min_overhead_kb,none_overhead_kb) | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$" 

[d_cluster_detail_AvgConsumMemPerVM_KB]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_maximum_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_minimum_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_none_mem_consumed_kiloBytes) from vmw_perf_mem_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_mem_consumed_kiloBytes) as avg_consumed_kb, $chartfun.chartfunval$(p_maximum_mem_consumed_kiloBytes) as max_consumed_kb, $chartfun.chartfunval$(p_minimum_mem_consumed_kiloBytes) as min_consumed_kb, $chartfun.chartfunval$(p_none_mem_consumed_kiloBytes) as none_consumed_kb | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=coalesce(avg_consumed_kb,max_consumed_kb,min_consumed_kb,none_consumed_kb) | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

[d_cluster_detail_AvgCpuUsg_pct]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_maximum_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_minimum_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_none_cpu_usagemhz_megaHertz) dc(moid) first(ccr) first(host) from vmw_perf_cpu_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_cpu_usagemhz_megaHertz) as avg_usagemhz_megaHertz, $chartfun.chartfunval$(p_maximum_cpu_usagemhz_megaHertz) as max_usagemhz_megaHertz, $chartfun.chartfunval$(p_minimum_cpu_usagemhz_megaHertz) as min_usagemhz_megaHertz, $chartfun.chartfunval$(p_none_cpu_usagemhz_megaHertz) as none_usagemhz_megaHertz dc(moid) as num_vms first(ccr) as moid first(host) as host | lookup TimeClusterServicesAvailability moid, host OUTPUT p_average_clusterServices_effectivecpu_megaHertz | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=(coalesce(avg_usagemhz_megaHertz,max_usagemhz_megaHertz,min_usagemhz_megaHertz,none_usagemhz_megaHertz)*num_vms*100)/p_average_clusterServices_effectivecpu_megaHertz | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

[d_cluster_detail_AvgCpuPerVM_mhz]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_maximum_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_minimum_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_none_cpu_usagemhz_megaHertz) from vmw_perf_cpu_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_cpu_usagemhz_megaHertz) as avg_usagemhz_megaHertz, $chartfun.chartfunval$(p_maximum_cpu_usagemhz_megaHertz) as max_usagemhz_megaHertz, $chartfun.chartfunval$(p_minimum_cpu_usagemhz_megaHertz) as min_usagemhz_megaHertz, $chartfun.chartfunval$(p_none_cpu_usagemhz_megaHertz) as none_usagemhz_megaHertz | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=coalesce(avg_usagemhz_megaHertz,max_usagemhz_megaHertz,min_usagemhz_megaHertz,none_usagemhz_megaHertz) | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

[d_cluster_detail_AvgMemUsg_pct]
disabled = true
is_visible = false
search = | `tstats`  $chartfun.chartfunval$(p_average_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_maximum_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_minimum_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_none_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_average_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_maximum_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_minimum_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_none_mem_overhead_kiloBytes) dc(moid) first(ccr) first(host) from vmw_perf_mem_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_mem_consumed_kiloBytes) as avg_consumed_kb, $chartfun.chartfunval$(p_maximum_mem_consumed_kiloBytes) as max_consumed_kb, $chartfun.chartfunval$(p_minimum_mem_consumed_kiloBytes) as min_consumed_kb, $chartfun.chartfunval$(p_none_mem_consumed_kiloBytes) as none_consumed_kb $chartfun.chartfunval$(p_average_mem_overhead_kiloBytes) as avg_overhead_kb, $chartfun.chartfunval$(p_maximum_mem_overhead_kiloBytes) as max_overhead_kb, $chartfun.chartfunval$(p_minimum_mem_overhead_kiloBytes) as min_overhead_kb, $chartfun.chartfunval$(p_none_mem_overhead_kiloBytes) as none_overhead_kb dc(moid) as num_vms first(ccr) as moid first(host) as host | lookup TimeClusterServicesAvailability host, moid OUTPUT p_average_clusterServices_effectivemem_megaBytes | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=(coalesce(avg_overhead_kb,max_overhead_kb,min_overhead_kb,none_overhead_kb)*num_vms + coalesce(avg_consumed_kb,max_consumed_kb,min_consumed_kb,none_consumed_kb)*num_vms*100)/(p_average_clusterServices_effectivemem_megaBytes*1024) | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

[d_cluster_detail_TotOverhd_KB]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_maximum_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_minimum_mem_overhead_kiloBytes) $chartfun.chartfunval$(p_none_mem_overhead_kiloBytes) dc(moid) from vmw_perf_mem_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_mem_overhead_kiloBytes) as avg_overhead_kb, $chartfun.chartfunval$(p_maximum_mem_overhead_kiloBytes) as max_overhead_kb, $chartfun.chartfunval$(p_minimum_mem_overhead_kiloBytes) as min_overhead_kb, $chartfun.chartfunval$(p_none_mem_overhead_kiloBytes) as none_overhead_kb dc(moid) as num_vms | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=coalesce(avg_overhead_kb,max_overhead_kb,min_overhead_kb,none_overhead_kb)*num_vms | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

[d_cluster_detail_TotConsum_KB]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_maximum_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_minimum_mem_consumed_kiloBytes) $chartfun.chartfunval$(p_none_mem_consumed_kiloBytes) dc(moid) from vmw_perf_mem_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_mem_consumed_kiloBytes) as avg_consumed_kb, $chartfun.chartfunval$(p_maximum_mem_consumed_kiloBytes) as max_consumed_kb, $chartfun.chartfunval$(p_minimum_mem_consumed_kiloBytes) as min_consumed_kb, $chartfun.chartfunval$(p_none_mem_consumed_kiloBytes) as none_consumed_kb dc(moid) as num_vms | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=coalesce(avg_consumed_kb,max_consumed_kb,min_consumed_kb,none_consumed_kb)*num_vms | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

[d_cluster_detail_TotUsg_mhz]
disabled = true
is_visible = false
search = | `tstats` $chartfun.chartfunval$(p_average_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_maximum_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_minimum_cpu_usagemhz_megaHertz) $chartfun.chartfunval$(p_none_cpu_usagemhz_megaHertz) dc(moid) from vmw_perf_cpu_virtualmachine where * instance="aggregated" ccr=$selectedClusterComputeResource$ groupby _time span=1m | timechart minspan=1m $chartfun.chartfunval$(p_average_cpu_usagemhz_megaHertz) as avg_usagemhz_megaHertz, $chartfun.chartfunval$(p_maximum_cpu_usagemhz_megaHertz) as max_usagemhz_megaHertz, $chartfun.chartfunval$(p_minimum_cpu_usagemhz_megaHertz) as min_usagemhz_megaHertz, $chartfun.chartfunval$(p_none_cpu_usagemhz_megaHertz) as none_usagemhz_megaHertz dc(moid) as num_vms | eval "$chartfun.chartfun$ $displaymetric.displaymetric$"=coalesce(avg_usagemhz_megaHertz,max_usagemhz_megaHertz,min_usagemhz_megaHertz,none_usagemhz_megaHertz)*num_vms | fields _time "$chartfun.chartfun$ $displaymetric.displaymetric$"

#Home Proactive Monitoring
[d_home_proactive_monitoring_row1_col1_gauge1]
disabled = true
is_visible = false
search = | `tstats` avg(p_average_cpu_usage_percent) from vmw_perf_cpu_virtualmachine groupby moid, host | stats avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by moid, host | thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_average_cpu_usage_percent, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalVMs count(eval(threshold_severity="critical")) AS HighCPUVms | eval PercentHighCPUVm=round((HighCPUVms/TotalVMs),2) | thresholdlookup entitytype=VirtualMachine, perftype=inv, metric=PercentHighCPUVm, match=false | eval threshold_warnlevel=threshold_warnlevel/100 | eval threshold_critlevel=threshold_critlevel/100 | gauge PercentHighCPUVm 0,threshold_warnlevel,threshold_critlevel,1

[d_home_proactive_monitoring_gauge_null]
disabled = true
is_visible = false
search = | stats count | eval x=0 | eval y1=0 | eval y2=.5 | eval y3=.75 | eval y4=1 | fields - count

[d_home_proactive_monitoring_row1_col1_gauge2]
disabled = true
is_visible = false
search = | `tstats` avg(p_average_mem_usage_percent) from vmw_perf_mem_virtualmachine groupby moid, host | stats avg(p_average_mem_usage_percent) AS p_average_mem_usage_percent by moid, host | thresholdlookup perftype=mem, entitytype=VirtualMachine, metric=p_average_mem_usage_percent, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalVMs count(eval(threshold_severity="critical")) AS HighMemVms | eval PercentHighMemVm=round((HighMemVms/TotalVMs),2) | thresholdlookup entitytype=VirtualMachine, perftype=inv, metric=PercentHighMemVm, match=false | eval threshold_warnlevel=threshold_warnlevel/100 | eval threshold_critlevel=threshold_critlevel/100 | gauge PercentHighMemVm 0,threshold_warnlevel,threshold_critlevel,1

[d_home_proactive_monitoring_row1_col1_gauge3]
disabled = true
is_visible = false
search = | `tstats` avg(p_summation_cpu_ready_millisecond) from vmw_perf_cpu_virtualmachine groupby moid, host | stats avg(p_summation_cpu_ready_millisecond) AS p_summation_cpu_ready_millisecond by moid, host | thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_summation_cpu_ready_millisecond, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalVMs count(eval(threshold_severity="critical")) AS HighSumRdyVms | eval PercentHighSumRdyVm=round((HighSumRdyVms/TotalVMs),2) | thresholdlookup entitytype=VirtualMachine, perftype=inv, metric=PercentHighSumRdyVm, match=false | eval threshold_warnlevel=threshold_warnlevel/100 | eval threshold_critlevel=threshold_critlevel/100 | gauge PercentHighSumRdyVm 0,threshold_warnlevel,threshold_critlevel,1

[d_home_proactive_monitoring_row1_col2_gauge1]
disabled = true
is_visible = false
search = | `tstats` p_average_mem_vmmemctl_kiloBytes from vmw_perf_mem_hostsystem groupby _time, moid, host | table _time, p_average_mem_vmmemctl_kiloBytes moid host | thresholdlookup perftype=mem, entitytype=HostSystem, metric=p_average_mem_vmmemctl_kiloBytes, match=false | stats count(eval(threshold_severity!="unknown")) AS TotalHosts count(eval(threshold_severity="critical")) AS HighHosts by host, moid | stats count AS TotalHosts count(eval(HighHosts>0)) AS HighHosts| eval PercentHighSwapHosts=round((HighHosts/TotalHosts)*100,2) | thresholdlookup entitytype=HostSystem, perftype=inv, metric=PercentHighSwapHosts, match=false | eval PercentHighSwapHosts=PercentHighSwapHosts/100 | eval threshold_warnlevel=threshold_warnlevel/100 | eval threshold_critlevel=threshold_critlevel/100 | gauge PercentHighSwapHosts 0,threshold_warnlevel,threshold_critlevel,1

[d_home_proactive_monitoring_row1_col2_gauge2]
disabled = true
is_visible = false
search = | `tstats` p_average_mem_llSwapUsed_kiloBytes from vmw_perf_mem_hostsystem groupby _time, moid, host | table _time, p_average_mem_llSwapUsed_kiloBytes moid host | thresholdlookup perftype=mem, entitytype=HostSystem, metric=p_average_mem_llSwapUsed_kiloBytes, match=false | stats count(eval(threshold_severity!="unknown")) AS TotalHosts count(eval(threshold_severity="critical")) AS HighHosts by host, moid | stats count AS TotalHosts count(eval(HighHosts>0)) AS HighHosts| eval PercentHighBalloonHosts=round((HighHosts/TotalHosts)*100,2) | thresholdlookup entitytype=HostSystem, perftype=inv, metric=PercentHighBalloonHosts, match=false | eval PercentHighBalloonHosts=PercentHighBalloonHosts/100 | eval threshold_warnlevel=threshold_warnlevel/100 | eval threshold_critlevel=threshold_critlevel/100 | gauge PercentHighBalloonHosts 0,threshold_warnlevel,threshold_critlevel,1

[d_home_proactive_monitoring_row1_col2_gauge3]
disabled = true
is_visible = false
search = | `tstats` avg(p_average_cpu_usage_percent) from vmw_perf_cpu_hostsystem groupby moid, host | stats avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by moid, host | thresholdlookup perftype=cpu, entitytype=HostSystem, metric=p_average_cpu_usage_percent, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalHosts count(eval(threshold_severity="critical")) AS HighCPUHosts | eval PercentHighCPUHosts=round((HighCPUHosts/TotalHosts),2) | thresholdlookup entitytype=HostSystem, perftype=inv, metric=PercentHighCPUHosts, match=false | eval threshold_warnlevel=threshold_warnlevel/100 | eval threshold_critlevel=threshold_critlevel/100 | gauge PercentHighCPUHosts 0,threshold_warnlevel,threshold_critlevel,1

[d_home_proactive_monitoring_row1_col1_footer_base]
disabled = true
is_visible = false
search = sourcetype=vmware:inv:hierarchy earliest=-4h latest=now | spath moid | spath type | search type="VirtualMachine" | spath changeSet.runtime.host.moid output=hostsystemmoid | table _time, moid, host, hostsystemmoid | sort 0 host, moid, _time | dedup  consecutive=t moid, hostsystemmoid | sort 0 _time | streamstats first(hostsystemmoid) as prev_hostsystem window=1 global=f current=f by moid host | reverse | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | lookup FullHierarchy moid AS hostsystemmoid, host AS host OUTPUT name AS HostSystem

[d_home_proactive_monitoring_row1_col1_footer_TotalVMs]
disabled = true
is_visible = false
search = | stats dc(moid) AS count by host | stats sum(count) AS TotalVMs

[d_home_proactive_monitoring_row1_col1_footer_TotalVMs_drill]
disabled = true
is_visible = false
search = | dedup moid, host | fields moid, VirtualMachine, hostsystemmoid, HostSystem, host | rename moid AS HIDE-VirtualMachineMoid, hostsystemmoid AS HIDE-HostSystemMoid, host AS vCenter | fields - _time | sort 0 vCenter, HIDE-VirtualMachineMoid

[d_home_proactive_monitoring_row1_col1_footer_TotalMigrations]
disabled = true
is_visible = false
search = | stats count(hostsystemmoid) as hostcount by moid,host | search hostcount>1 | eval hostcount=hostcount-1 | stats sum(hostcount) AS TotalMigrations

[d_home_proactive_monitoring_row1_col1_footer_TotalMigrations_drill]
disabled = true
is_visible = false
search = | stats first(VirtualMachine) AS VirtualMachine count(hostsystemmoid) as hostcount first(hostsystemmoid) AS hostsystemmoid first(HostSystem) AS CurrentHost by moid, host | search hostcount>1 | eval hostcount=hostcount-1 | rename moid AS HIDE-VirtualMachineMoid, hostcount AS TotalMigrations, CurrentHost AS HostSystem, hostsystemmoid AS HIDE-HostSystemMoid, host AS vCenter

[d_home_proactive_monitoring_row1_col2_footer_base]
disabled = true
is_visible = false
search = sourcetype=vmware:inv:hierarchy earliest=-4h latest=now | spath moid | spath type | search type="HostSystem" | spath changeSet.parent.type output=parenttype | spath changeSet.parent.moid output=parentmoid | table _time, moid, host, parenttype, parentmoid | dedup moid, host, parenttype, parentmoid | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS HostSystem | lookup FullHierarchy moid AS parentmoid, host AS host OUTPUT name AS ParentName | eval ClusterComputeResource=if(parenttype="ClusterComputeResource", ParentName, "N/A") | rename moid AS HIDE-HostSystem-moid, parentmoid AS HIDE-ClusterComputeResource-moid, host AS HIDE-host | table HostSystem, ClusterComputeResource, HIDE*

[d_home_proactive_monitoring_row1_col2_footer_TotalHosts]
disabled = true
is_visible = false
search = | stats count AS TotalHosts

[d_home_proactive_monitoring_row1_col2_footer_TotalHosts_drill]
disabled = true
is_visible = false
search = | search *

#Performance of Hosts and VM's
[d_host_vm_perf_hierarchy_vm]
disabled = true
is_visible = false
search = search *

[d_host_vm_perf_hierarchy_host]
disabled = true
is_visible = false
search = search type!="VirtualMachine"

[d_host_vm_perf_perftype_host]
disabled = true
is_visible = false
search = sourcetype=vmware:perf* ($selectedHostSystem$) | streamstats range(_time) AS rangetime | head (rangetime<900) | stats values(sourcetype) AS perftype | mvexpand perftype | eval displayperftype=replace(perftype,"vmware:perf:","") | eval tsidxnamespace="vmw_perf_" + displayperftype + "_hostsystem"

[d_host_vm_perf_perftype_vm]
disabled = true
is_visible = false
search = sourcetype=vmware:perf* ($selectedVirtualMachine$) | streamstats range(_time) AS rangetime | head (rangetime<900) | stats values(sourcetype) AS perftype | mvexpand perftype | eval displayperftype=replace(perftype,"vmware:perf:","") | eval tsidxnamespace="vmw_perf_" + displayperftype + "_virtualmachine" | search NOT displayperftype=virtualDisk

[d_host_vm_perf_fields_host]
disabled = true
is_visible = false
search = sourcetype=$displayperftype.perftype$ ($selectedHostSystem$) instance=aggregated | head 1 | stats values(p_*) AS p_* | transpose | fields column | rename column AS field | eval displayfield=replace(field, "^p_","") | eval command=replace(displayfield,"_.*","") | eval command=case(command=="average","avg", command=="latest","first", command=="summation", "sum") | fillnull command value="avg"

[d_host_vm_perf_fields_vm]
disabled = true
is_visible = false
search = sourcetype=$displayperftype.perftype$ ($selectedVirtualMachine$) instance=aggregated | head 1 | stats values(p_*) AS p_* | transpose | fields column | rename column AS field | eval displayfield=replace(field, "^p_","") | eval command=replace(displayfield,"_.*","") | eval command=case(command=="average","avg", command=="latest","first", command=="summation", "sum") | fillnull command value="avg"

[d_host_vm_perf_20s_host]
disabled = true
is_visible = false
search = | `tstats` $displayfield.command$($displayfield.field$) from $displayperftype.tsidxnamespace$ where * $selectedHostSystem$ groupby _time,moid,host span=5m | lookup FullHierarchy moid AS moid host AS host OUTPUT name AS name | timechart minspan=5m $displayfield.command$($displayfield.field$) AS $displayfield.field$ by name

[d_host_vm_perf_20s_vm]
disabled = true
is_visible = false
search = | `tstats` $displayfield.command$($displayfield.field$) from $displayperftype.tsidxnamespace$ where * $selectedVirtualMachine$ groupby _time,moid,host span=5m | lookup FullHierarchy moid AS moid host AS host OUTPUT name AS name | timechart minspan=5m $displayfield.command$($displayfield.field$) AS $displayfield.field$ by name

# Capacity Planning hosts searches
[d_capacity_planning_hosts_list_usage_cpu]
disabled = true
is_visible = false
search = | `tstats` max(p_average_cpu_usage_percent) as maxUsage from vmw_perf_cpu_hostsystem groupby host,moid,_time span=$tspan.setter$ | stats max(p_average_cpu_usage_percent) AS maxUsage by moid, host, _time | lookup FullHierarchy host, moid OUTPUT name AS esxName | eval isMatch=if(maxUsage $caphosthigherOrLower$ $caphostusageThreshold$,1,0) | stats count sum(isMatch) AS matchCount by host,moid,esxName | eval percentMatch=round(100*matchCount/count,0) | search percentMatch>$caphosttimeThreshold$ | sort - percentMatch | eval percentMatch=percentMatch+"%" | fields host moid esxName percentMatch | rename esxName AS "ESX/i" percentMatch AS "percent of time $perftype.name$ usage was $caphostusageThreshold$% $higherOrLower.label$" | rename host as vc moid as HIDE-moid

[d_capacity_planning_hosts_list_usage_mem]
disabled = true
is_visible = false
search = | `tstats` max(p_average_mem_usage_percent) as maxUsage from vmw_perf_mem_hostsystem groupby host,moid,_time span=$tspan.setter$ | stats max(p_average_mem_usage_percent) AS maxUsage by moid, host, _time | lookup FullHierarchy host, moid OUTPUT name AS esxName | eval isMatch=if(maxUsage $caphosthigherOrLower$ $caphostusageThreshold$,1,0) | stats count sum(isMatch) AS matchCount by host,moid,esxName | eval percentMatch=round(100*matchCount/count,0) | search percentMatch>$caphosttimeThreshold$ | sort - percentMatch | eval percentMatch=percentMatch+"%" | fields host moid esxName percentMatch | rename esxName AS "ESX/i" percentMatch AS "percent of time $perftype.name$ usage was $caphostusageThreshold$% $higherOrLower.label$" | rename host as vc moid as HIDE-moid

[d_capacity_planning_hosts_20s_cpu]
disabled = true
is_visible = false
search = | `tstats` avg(p_average_cpu_usage_percent) max(p_average_cpu_usage_percent) from vmw_perf_cpu_hostsystem where * moid=$click.HIDE-moid$ host=$click.vc$ groupby _time span=$tspan.setter$ | timechart minspan=$tspan.setter$ avg(p_average_cpu_usage_percent) AS avgUsage max(p_average_cpu_usage_percent) AS maxUsage | eval threshold=$caphostusageThreshold$ | rename threshold as "($caphostusageThreshold$% usage)"

[d_capacity_planning_hosts_20s_mem]
disabled = true
is_visible = false
search =  | `tstats` avg(p_average_mem_usage_percent) max(p_average_mem_usage_percent) from vmw_perf_mem_hostsystem where * moid=$click.HIDE-moid$ host=$click.vc$ groupby _time span=$tspan.setter$ | timechart minspan=$tspan.setter$ avg(p_average_mem_usage_percent) AS avgUsage max(p_average_mem_usage_percent) AS maxUsage | eval threshold=$caphostusageThreshold$ | rename threshold as "($caphostusageThreshold$% usage)"


# Capacity Planning Cluster
[d_capacity_planning_cluster_cpu]
disabled = true
is_visible = false
search = | `tstats` avg(p_average_cpu_usagemhz_megaHertz) dc(moid) first(host) from vmw_perf_cpu_virtualmachine where instance="aggregated" groupby host,ccr,_time span=$tspan.setter$  | stats avg(p_average_cpu_usagemhz_megaHertz) as AvgCpuPerVM_mhz, dc(moid) as num_vms by host,ccr,_time | eval moid=ccr | lookup TimeClusterServicesAvailability host, moid  OUTPUT p_average_clusterServices_effectivecpu_megaHertz | search p_average_clusterServices_effectivecpu_megaHertz!="noClusterServices"| eval TotUsg_mhz=AvgCpuPerVM_mhz*num_vms | eval AvgcpuUsg_pct=(TotUsg_mhz/p_average_clusterServices_effectivecpu_megaHertz)*100 | stats avg(AvgcpuUsg_pct) as AvgUsg_pct by moid, host, _time | lookup FullHierarchy host, moid OUTPUT name  |  eval isMatch=if(AvgUsg_pct $capclusterhigherOrLower$ $capclusterusageThreshold$,1,0) | stats count sum(isMatch) as matchCount by moid,name,host | eval percentMatch=round(100*matchCount/count,0) | search percentMatch>$capclustertimeThreshold$ | sort - percentMatch, + host, + name  | eval percentMatch=percentMatch+"%" | fields host name moid percentMatch | rename host as VirtualCenter name as Cluster moid as ClusterID percentMatch as "percent of time $perftype.name$ usage was $capclusterusageThreshold$% $higherOrLower.label$"

[d_capacity_planning_cluster_mem]
disabled = true
is_visible = false
search = | `tstats` avg(p_average_mem_overhead_kiloBytes) avg(p_maximum_mem_overhead_kiloBytes) avg(p_minimum_mem_overhead_kiloBytes) avg(p_none_mem_overhead_kiloBytes) avg(p_average_mem_consumed_kiloBytes) avg(p_maximum_mem_consumed_kiloBytes) avg(p_minimum_mem_consumed_kiloBytes) avg(p_none_mem_consumed_kiloBytes) dc(moid) first(ccr) first(host) from vmw_perf_mem_virtualmachine where instance="aggregated" groupby host,ccr,_time span=$tspan.setter$  | stats avg(p_average_mem_overhead_kiloBytes) as p_average_mem_overhead_kiloBytes,avg(p_maximum_mem_overhead_kiloBytes) as  p_maximum_mem_overhead_kiloBytes, avg(p_minimum_mem_overhead_kiloBytes) as  p_minimum_mem_overhead_kiloBytes, avg(p_none_mem_overhead_kiloBytes) as p_none_mem_overhead_kiloBytes, avg(p_average_mem_consumed_kiloBytes) as p_average_mem_consumed_kiloBytes, avg(p_maximum_mem_consumed_kiloBytes) as p_maximum_mem_consumed_kiloBytes, avg(p_minimum_mem_consumed_kiloBytes) as p_minimum_mem_consumed_kiloBytes, avg(p_none_mem_consumed_kiloBytes) as p_none_mem_consumed_kiloBytes, dc(moid) as num_vms  by  host,ccr,_time | eval AvgOvrhdMemPerVM_KB =coalesce(p_average_mem_overhead_kiloBytes, p_maximum_mem_overhead_kiloBytes, p_minimum_mem_overhead_kiloBytes, p_none_mem_overhead_kiloBytes) | eval AvgConsumMemPerVM_KB = coalesce(p_average_mem_consumed_kiloBytes, p_maximum_mem_consumed_kiloBytes, p_minimum_mem_consumed_kiloBytes, p_none_mem_consumed_kiloBytes)  | eval TotConsum_KB=AvgConsumMemPerVM_KB*num_vms | eval TotOverhd_KB=AvgOvrhdMemPerVM_KB*num_vms | eval TotUsg_mhz=AvgCpuPerVM_mhz*num_vms | eval moid=ccr |lookup TimeClusterServicesAvailability host, moid  OUTPUT p_average_clusterServices_effectivemem_megaBytes | search p_average_clusterServices_effectivemem_megaBytes!="noClusterServices"| eval AvgmemUsg_pct=((TotConsum_KB + TotOverhd_KB)/(p_average_clusterServices_effectivemem_megaBytes*1024))*100 | stats avg(AvgmemUsg_pct) as AvgUsg_pct by moid, host, _time| lookup FullHierarchy host, moid OUTPUT name |  eval isMatch=if(AvgUsg_pct $capclusterhigherOrLower$ $capclusterusageThreshold$,1,0) | stats count sum(isMatch) as matchCount by moid,name, host| eval percentMatch=round(100*matchCount/count,0) | search percentMatch>$capclustertimeThreshold$ | sort - percentMatch, + host, + name  | eval percentMatch=percentMatch+"%" | fields host name moid percentMatch | rename host as VirtualCenter name as Cluster moid as ClusterID percentMatch as "percent of time $perftype.name$ usage was $capclusterusageThreshold$% $higherOrLower.label$"

[d_capacity_planning_clusters_cpu_chart]
disabled = true
is_visible = false
search= | `tstats` avg(p_average_cpu_usagemhz_megaHertz) max(p_average_cpu_usagemhz_megaHertz) dc(moid) from vmw_perf_cpu_virtualmachine where instance="aggregated" ccr=$click.ClusterID$ host=$click.VirtualCenter$ groupby moid,_time,host span=$tspan.setter$  | stats avg(p_average_cpu_usagemhz_megaHertz) as avg_usage_mhz, max(p_average_cpu_usagemhz_megaHertz) as max_usage_mhz dc(moid) as num_vms by moid, _time,host | stats dc(moid) as num_vms avg(avg_usage_mhz) as usgavg avg(max_usage_mhz) as usgmax by _time,host | eval moid="$click.ClusterID$" |  lookup TimeClusterServicesAvailability host,moid  OUTPUT p_average_clusterServices_effectivecpu_megaHertz |  eval avg_usage_pct=((usgavg*num_vms)/p_average_clusterServices_effectivecpu_megaHertz)*100 | eval max_usage_pct=((usgmax*num_vms)/p_average_clusterServices_effectivecpu_megaHertz)*100 | eval threshold=$capclusterusageThreshold$ | timechart span=$tspan.setter$ avg(avg_usage_pct) as "average usage" avg(max_usage_pct) as "max usage" avg(threshold) as "($capclusterusageThreshold$% usage)"

[d_capacity_planning_clusters_mem_chart]
disabled = true
is_visible = false
search =  | `tstats` avg(p_average_mem_overhead_kiloBytes) avg(p_maximum_mem_overhead_kiloBytes) avg(p_minimum_mem_overhead_kiloBytes) avg(p_none_mem_overhead_kiloBytes) avg(p_average_mem_consumed_kiloBytes) avg(p_maximum_mem_consumed_kiloBytes) avg(p_minimum_mem_consumed_kiloBytes) avg(p_none_mem_consumed_kiloBytes) dc(moid) first(ccr) first(host) from vmw_perf_mem_virtualmachine where instance="aggregated" ccr=$click.ClusterID$ host=$click.VirtualCenter$ groupby host,moid,_time span=$tspan.setter$ | stats max(p_average_mem_usage_percent) as max_mem_usage avg(p_average_mem_overhead_kiloBytes) as p_average_mem_overhead_kiloBytes,avg(p_maximum_mem_overhead_kiloBytes) as  p_maximum_mem_overhead_kiloBytes, avg(p_minimum_mem_overhead_kiloBytes) as  p_minimum_mem_overhead_kiloBytes, avg(p_none_mem_overhead_kiloBytes) as p_none_mem_overhead_kiloBytes, avg(p_average_mem_consumed_kiloBytes) as p_average_mem_consumed_kiloBytes, avg(p_maximum_mem_consumed_kiloBytes) as p_maximum_mem_consumed_kiloBytes, avg(p_minimum_mem_consumed_kiloBytes) as p_minimum_mem_consumed_kiloBytes, avg(p_none_mem_consumed_kiloBytes) as p_none_mem_consumed_kiloBytes, dc(moid) as num_vms, first(ccr) as moid, first(host) as host by _time | eval AvgOvrhdMemPerVM_KB =coalesce(p_average_mem_overhead_kiloBytes, p_maximum_mem_overhead_kiloBytes, p_minimum_mem_overhead_kiloBytes, p_none_mem_overhead_kiloBytes)| eval AvgConsumMemPerVM_KB = coalesce(p_average_mem_consumed_kiloBytes, p_maximum_mem_consumed_kiloBytes, p_minimum_mem_consumed_kiloBytes, p_none_mem_consumed_kiloBytes) | eval MaxConsumMemPerVM_KB= max(p_average_mem_consumed_kiloBytes) | eval TotConsum_KB=AvgConsumMemPerVM_KB*num_vms | eval TotMaxConsum_KB=MaxConsumMemPerVM_KB*num_vms | eval TotOverhd_KB=AvgOvrhdMemPerVM_KB*num_vms | lookup TimeClusterServicesAvailability host, moid  OUTPUT p_average_clusterServices_effectivemem_megaBytes | search p_average_clusterServices_effectivemem_megaBytes!="noClusterServices"| eval AvgmemUsg_pct=((TotConsum_KB + TotOverhd_KB)/(p_average_clusterServices_effectivemem_megaBytes*1024))*100 | eval MaxmemUsg_pct=((TotMaxConsum_KB + TotOverhd_KB)/(p_average_clusterServices_effectivemem_megaBytes*1024))*100 | eval threshold=$capclusterusageThreshold$ | timechart span=$tspan.setter$ avg(AvgmemUsg_pct) as "average usage" avg(MaxmemUsg_pct) as "max usage" avg(threshold) as "($capclusterusageThreshold$% usage)"

# Syslog scripted alert 
[vmw_esxlog_interruption_alert]
disabled = false
is_visible = false
search = | genhost vcenter="*" | eval host=name | append [metasearch sourcetype="vmware:esx*" earliest=-15m  | stats first(_time) as latest_time by host | eval lag=if((now()-latest_time)>600,"bad","fine")] | stats first(name) as name first(vcenter) as vcenter first(username) as username first(moid) as moid first(config.product.name) as config.product.name first(config.product.version) as config.product.version first(lag) as lag count by host | search (count>1 AND lag="bad") OR (NOT lag=*) | syslogconfigtask repair=1
cron_schedule = */10 * * * * 
dispatch.earliest_time = -15m
dispatch.latest_time = now
enableSched = 1


[Average CPU Utilization]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Average CPU Utilization threshold state
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.visualizations.charting.chart = pie
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_cpu_usage_percent) from vmw_perf_cpu_virtualmachine where * host=* groupby host, moid | stats avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by host, moid | thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_average_cpu_usage_percent, match=false | chart count by threshold_severity

[Average Memory Provisioning]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Average Memory Provisioning state for all hosts
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
display.visualizations.charting.chart = pie
display.visualizations.show = 1
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_usage_percent) from vmw_perf_mem_virtualmachine where * host=* groupby host, moid | stats avg(p_average_mem_usage_percent) AS p_average_mem_provision_percent by host, moid | thresholdlookup perftype=mem, entitytype=VirtualMachine, metric=p_average_mem_provision_percent, match=false | replace "normal" with "under-provisioned", "warning" with "normal", "critical" with "over-provisioned" in threshold_severity | chart count by threshold_severity

[Average VM CPU Ready]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = VM CPU Ready state for all the hosts
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
display.visualizations.charting.chart = pie
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_summation_cpu_ready_millisecond) from vmw_perf_cpu_hostsystem where * host=* groupby host,moid | stats avg(p_summation_cpu_ready_millisecond) AS p_summation_cpu_ready_millisecond by moid| thresholdlookup perftype=cpu, entitytype=HostSystem, metric=p_summation_cpu_ready_millisecond, match=false | chart count by threshold_severity

[Vmware Security changes]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Vmware Security changes in last 30 days
dispatch.earliest_time = -30d@d
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:events" AND host=* AND (action="created" OR action="deleted" OR action="modified") | rename userName as User, fullFormattedMessage as Message | table User Message host

[Total VM Migrations]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Total VM Migrations across all hosts
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype=vmware:inv:hierarchy | spath moid | spath type | search type="VirtualMachine" | spath changeSet.runtime.host.moid output=hostsystemmoid | table _time, moid, host, hostsystemmoid | sort 0 host, moid, _time | dedup  consecutive=t moid, hostsystemmoid | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | lookup FullHierarchy moid AS hostsystemmoid, host AS host OUTPUT name AS HostSystem | stats count(hostsystemmoid) as hostcount by moid,host | search hostcount>1 | eval hostcount=hostcount-1 | stats sum(hostcount) AS TotalMigrations

[Top 5 Migrated VMs]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Top 5 Migrated VMs across all hosts
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype=vmware:inv:hierarchy | spath moid | spath type | search type="VirtualMachine" | spath changeSet.runtime.host.moid output=hostsystemmoid | table _time, moid, host, hostsystemmoid | sort 0 host, moid, _time | dedup  consecutive=t moid, hostsystemmoid | lookup FullHierarchy moid AS moid, host AS host OUTPUT name AS VirtualMachine | lookup FullHierarchy moid AS hostsystemmoid, host AS host OUTPUT name AS HostSystem | stats count(hostsystemmoid) as hostcount by  VirtualMachine, moid,host | search hostcount>1 | eval hostcount=hostcount-1 | top 5 VirtualMachine

[Snapshots older than 14 days]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = 0
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.visualizations.show = 0
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` first(snapshotName) first(snapshotTime) first(filesize) from vmw_inv_datastore_virtualmachine where * host=*  filetype="snapshotdata" groupby filedatastore, _time, moid, filename, filetype, host | stats first(snapshotTime) AS CreateTime, first(snapshotName) AS snapshotName, first(filesize) as size by filename, filedatastore, moid,host | eval CreateTimeEpoch=strptime(CreateTime,"%Y-%m-%d %H:%M:%S.%Q") | convert ctime(CreateTimeEpoch) AS CreatedTime | eval Size =`format_bytes(size)` | fields - splitSubPath, CreateTime,  size | eval time14DaysAgo=relative_time(now(),"-14d@d") |rename filename as Filename | where (CreateTimeEpoch < time14DaysAgo) | lookup Entity moid as moid output name as "VM Name"| fields - CreateTimeEpoch, moid, time14DaysAgo

[Max Disk Latency per VM]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Max Disk Latency per VM for all the hosts
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_latest_disk_maxTotalLatency_millisecond) from vmw_perf_disk_virtualmachine where * host=* groupby host, moid | stats avg(p_latest_disk_maxTotalLatency_millisecond) AS p_latest_disk_maxTotalLatency_millisecond by host, moid | thresholdlookup perftype=disk, entitytype=VirtualMachine, metric=p_latest_disk_maxTotalLatency_millisecond, match=false | chart count by threshold_severity

[Datastore Free Space state]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Datastore Free Space state
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype = "vmware:inv:datastore" host=* | spath moid output=moid | spath changeSet.info.name output=name | spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace | head collectionVersion!=1 keeplast=t | stats first(name) as name first(freeSpace) as freeSpace first(capacity) as capacity by moid| eval RemainingCapacity_GB=`BytesToGigaBytes(freeSpace)` | eval totalSpace=`BytesToGigaBytes(capacity)` | thresholdlookup entitytype=Datastore,perftype=inv,metric=RemainingCapacity_GB match=false | chart count by threshold_severity


[Alarms]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search shows alarms from all the  VCs
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:events" alarm.name=* | spath to | search to=* | spath alarm.name output=alarm | spath vm.name output=vm_name | spath vm.vm.moid output=vm_moid | search host=* | stats list(vm_name) as vms list(to) as status first(to) as cur_status by alarm vm_moid host | search cur_status="red" OR cur_status="yellow"| stats count by alarm

[Critical CPU Ready]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This report shows critical CPU ready for all the VCs
dispatch.earliest_time = 0
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_summation_cpu_ready_millisecond) avg(p_average_cpu_usage_percent) from vmw_perf_cpu_virtualmachine where host=* groupby moid,host | stats avg(p_summation_cpu_ready_millisecond) AS p_summation_cpu_ready_millisecond avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by moid,host | thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_summation_cpu_ready_millisecond, match=false | search threshold_severity="critical" | lookup Entity moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename p_summation_cpu_ready_millisecond as CPU_Ready  | fields VirtualMachine, CPU_Ready, moid, host | sort CPU_Ready desc

[Critical CPU Usage]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search gets all the VMs with critical CPU usage for all the VCs
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats`  avg(p_average_cpu_usage_percent) from vmw_perf_cpu_virtualmachine where host=* groupby moid,host | stats avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by moid,host |  thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_average_cpu_usage_percent, match=false | search threshold_severity="critical" | lookup Entity moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename p_average_cpu_usage_percent as "Avg CPU Usage" | fields VirtualMachine, "Avg CPU Usage", moid, host | sort "Avg CPU Usage" desc

[Critical Mem Usage]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search gets all the VMs with critical memory usage for all the VCs
dispatch.earliest_time = 0
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_usage_percent) from vmw_perf_mem_virtualmachine where host=* groupby moid,host | stats  avg(p_average_mem_usage_percent) AS p_average_mem_usage_percent   by moid,host |  thresholdlookup perftype=mem, entitytype=VirtualMachine, metric=p_average_mem_usage_percent, match=false | search threshold_severity="critical" | lookup Entity moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename p_average_mem_usage_percent as "Avg Mem Usage"| fields VirtualMachine,"Avg Mem Usage" ,moid, host | sort "Avg Mem Usage" desc

[Memory Utilization by Cluster]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search shows memory usage for all clusters over time
display.general.type = visualizations
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_usage_percent)  from vmw_perf_mem_virtualmachine where host=* groupby ccr,moid,host,_time span=1m | stats avg(p_average_mem_usage_percent) as p_average_mem_usage_percent by ccr,host,moid, _time| eval p_average_mem_usage_percent= if(p_average_mem_usage_percent<=0, 0, p_average_mem_usage_percent) | timechart span=1m avg(p_average_mem_usage_percent) AS p_average_mem_usage_percent by ccr

[Critical Disk Usage]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search shows all the VMs with Critical disk usage for all the hosts
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_disk_usage_kiloBytesPerSecond) from vmw_perf_disk_virtualmachine where host=* groupby moid,host | stats  avg(p_average_disk_usage_kiloBytesPerSecond) AS p_average_disk_usage_kiloBytesPerSecond by moid,host |  thresholdlookup perftype=disk, entitytype=VirtualMachine, metric=p_average_disk_usage_kiloBytesPerSecond, match=false | search threshold_severity="critical" | lookup Entity moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename p_average_disk_usage_kiloBytesPerSecond as "Avg Disk Usage" | fields VirtualMachine,"Avg Disk Usage" , moid, host | sort "Avg Disk Usage" desc

[VMs With Old or No Tools]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search shows VMs that have old or no tools installed
dispatch.earliest_time = 0
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:vm" host=*| spath moid output=moid | spath collectionVersion output=collectionVersion | spath changeSet.name output=name | spath changeSet.guest.toolsStatus output=toolsStatus | stats first(name) AS name, first(toolsStatus) As toolsStatus by host, moid  | dedup host, moid   | eval toolsStatus=if(isnull(toolsStatus), "Not Available", toolsStatus) | search toolsStatus="toolsOld" OR toolsStatus="Not Available"  |rename name As VirtualMachine

[Powered Off VMs]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Shows Powered Off VMs for all the hosts
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search =sourcetype="vmware:inv:vm"  host=* | spath moid output=moid | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.name output=name  | stats first(powerState) as PowerState, first(name) as name by moid, host |dedup host,moid  |  search PowerState="poweredOff"  | rename name as VirtualMachine | fields - PowerState

[Top Hosts with Ballooning]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search shows Top Hosts with Memory Ballooning for all the hosts
dispatch.earliest_time = 0
display.general.type = statistics
display.visualizations.show=0
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_vmmemctl_kiloBytes) from vmw_perf_mem_hostsystem  where host=* groupby moid, host| stats avg(p_average_mem_vmmemctl_kiloBytes) as avg_vmmemctl_kb by host,moid |sort avg_vmmemctl_kb desc | eval BalloonedMemory=`format_bytes(avg_vmmemctl_kb*1024)` | lookup Entity moid AS moid, host AS host OUTPUT name AS HostSystem | table HostSystem, BalloonedMemory, host  | fields - count, - percent

[CPU Usage by Cluster]
action.email.inline = 1
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
description = This search shows CPU usage by cluster for all the VCs
display.general.type = statistics
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = |`tstats` avg(p_average_cpu_usage_percent)  from vmw_perf_cpu_virtualmachine where host=* groupby host,ccr,moid _time span=1m | stats avg(p_average_cpu_usage_percent) as p_average_cpu_usage_percent by host, ccr, moid, _time | eval p_average_cpu_usage_percent = if((p_average_cpu_usage_percent <= 0), 0, p_average_cpu_usage_percent) | lookup Entity moid AS ccr OUTPUT name AS clusterName |timechart span=1m  avg(p_average_cpu_usage_percent) AS average_cpu_usage_percent by clusterName

[CPU Usage by VC]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = shows CPU usage by VC for selected time
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_cpu_usage_percent) max(p_average_cpu_usage_percent) perc95(p_average_cpu_usage_percent)  from vmw_perf_cpu_virtualmachine groupby host,moid _time span=1m| timechart span=1m avg(p_average_cpu_usage_percent) as avg_cpu_usage_% max(p_average_cpu_usage_percent) as max_cpu_usage_%  perc95(p_average_cpu_usage_percent)  as perc95_cpu_usage_%  by host where (avg_*>=0 AND max_* >=0 AND perc_*>=0)

[CPU Ready by VC]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = This search shows timechart for CPU Ready for all the hosts
display.general.type = visualizations
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_summation_cpu_ready_millisecond) max(p_summation_cpu_ready_millisecond) perc95(p_summation_cpu_ready_millisecond) from vmw_perf_cpu_virtualmachine groupby host, moid _time span=1m | timechart span=1m avg(p_summation_cpu_ready_millisecond) as avg_cpu_rdy_ms_per_20s max(p_summation_cpu_ready_millisecond) as max_cpu_rdy_ms_per_20s perc95(p_summation_cpu_ready_millisecond) as perc95_cpu_rdy_ms_per_20s by host where (avg_*>=0 AND max_* >=0 AND perc_*>=0)

[Memory Usage by VC]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = 0
display.general.type = visualizations
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_usage_percent) max(p_average_mem_usage_percent) perc95(p_average_mem_usage_percent) from vmw_perf_mem_virtualmachine  groupby host, moid _time span=1m | timechart span=1m avg(p_average_mem_usage_percent) AS avg_mem_usage_pct max(p_average_mem_usage_percent)  AS max_mem_usage_pct perc95(p_average_mem_usage_percent)  AS perc95_mem_usage_pct by host where (avg_*>=0 AND max_* >=0 AND perc_*>=0)

[Memory Ballooning by VC]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Search shows timechart for memory ballooning for all the hosts
dispatch.earliest_time = -4h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_vmmemctl_kiloBytes) max(p_average_mem_vmmemctl_kiloBytes) perc95(p_average_mem_vmmemctl_kiloBytes) from vmw_perf_mem_virtualmachine groupby host, moid, _time span=1m | timechart span=1m avg(p_average_mem_vmmemctl_kiloBytes) AS avg_mem_vmmemctl_kb max(p_average_mem_vmmemctl_kiloBytes)  AS max_mem_vmmemctl_kb perc95(p_average_mem_vmmemctl_kiloBytes)  AS perc95_mem_vmmemctl_kb by host where (avg_*>=0 AND max_* >=0 AND perc_*>=0)

[Memory Swapped by VC]
action.email.inline = 1
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
description = Search shows memory swapped by host for selected time
display.general.type = visualizations
display.visualizations.charting.chart = line
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_swapped_kiloBytes) max(p_average_mem_swapped_kiloBytes) perc95(p_average_mem_swapped_kiloBytes) from vmw_perf_mem_virtualmachine groupby host, moid _time span=1m | timechart span=1m avg(p_average_mem_swapped_kiloBytes) AS avg_mem_swp_kb max(p_average_mem_swapped_kiloBytes)  AS max_mem_swp_kb perc95(p_average_mem_swapped_kiloBytes)  AS perc95_mem_swp_kb by host where (avg_*>=0 AND max_* >=0 AND perc_*>=0)

[Top OSs]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Shows Top OSs installed on VMs on all the VCs
display.general.type = statistics
display.visualizations.charting.chart = column
display.visualizations.show = 1
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:vm" host=* |spath moid output=moid | spath changeSet.config.guestFullName output=OS |  dedup host,moid | top OS


[Host System - Count by Available Memory]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
dispatch.earliest_time = -8h
alert.track = 0
dispatch.earliest_time = 0
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.numCpuCores output=CPUCores| spath changeSet.summary.hardware.memorySize output=memorySize | spath changeSet.summary.quickStats.overallMemoryUsage output=overallMemoryUsage | stats first(memorySize) AS Mem, first(overallMemoryUsage) AS MemUsg by host,moid | eval MaxMemMB=((Mem/1024)/1024) | eval FreeMem=MaxMemMB-MemUsg  | bucket FreeMem bins=5 |chart count by FreeMem

[Host System - Count by CPU Cores]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
dispatch.earliest_time = -8h
alert.track = 0
dispatch.earliest_time = 0
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.numCpuCores output=CPUCores|  stats first(CPUCores) As CPUCores by host,moid | chart count by CPUCores

[Host System - Count by Cores per Socket]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
dispatch.earliest_time = 0
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem"| spath changeSet.summary.hardware.numCpuCores output=CPUCores |  spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs |  stats first(numCpuPkgs) As ProcessorSockets first(CPUCores) AS CPUCores by host,moid | eval CoresPerSocket=CPUCores/ProcessorSockets | chart count by CoresPerSocket

[Host System - Count by Free CPU]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
dispatch.earliest_time = -8h
alert.track = 0
display.general.type = statistics
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.numCpuCores output=CPUCores| spath changeSet.summary.hardware.cpuMhz output=cpuMhz | spath changeSet.summary.quickStats.overallCpuUsage output=overallCpuUsage | stats first(cpuMhz) AS MhzPerCore, first(CPUCores) AS CPUCores, first(cpuMhz) AS MhzPerCore, first(overallCpuUsage) AS CpuUsg by host,moid |  eval MaxCpuMhz=MhzPerCore*CPUCores | eval FreeCpu=MaxCpuMhz-CpuUsg | bucket FreeCpu bins=5 |chart count by FreeCpu

[Host System - Count by Logical Processors]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem"|  spath changeSet.summary.hardware.numCpuThreads output=logicalProcessor|  stats first(numCpuPkgs) As ProcessorSockets first(logicalProcessor) AS LogicalProcessor by host,moid  | chart count by LogicalProcessor

[Host System - Count by Manufacturer]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.vendor output=manufacturer |  stats first(manufacturer) AS Manufacturer by host,moid |chart count by Manufacturer

[Host System - Count by Model]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
dispatch.earliest_time = -8h
alert.track = 0
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.model output=model |  stats first(model) As Model by host,moid |chart count by Model

[Host System - Count by Number of NICs]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
dispatch.earliest_time = -8h
alert.track = 0
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" |  spath changeSet.summary.hardware.numNics output=numNics |  stats first(numNics) As NumberofNICs by host,moid |chart count by NumberofNICs

[Host System - Count by Processor Type]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" |  spath changeSet.summary.hardware.cpuModel output=processorType |  stats first(processorType) As processorType by host,moid | chart count by processorType

[Host System- Count by ProcessorSockets]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" |  spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs |  stats first(numCpuPkgs) As ProcessorSockets by host,moid | chart count by ProcessorSockets

[Host System - Count by Hyperthreading]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" |  spath changeSet.config.hyperThread.active output=active |  stats first(active) As active by host,moid | eval Hyperthreading=if(active="True", "Active", "Inactive") | chart count by Hyperthreading


[Host System - Count by Total Memory]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.memorySize output=memorySize |  stats first(memorySize) AS Mem by host,moid | eval MaxMemMB=((Mem/1024)/1024)  | bucket MaxMemMB bins=5 |chart count by MaxMemMB

[Host System - Count by Total Processing]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" | spath changeSet.summary.hardware.numCpuCores output=CPUCores| spath changeSet.summary.hardware.cpuMhz output=cpuMhz  | stats first(cpuMhz) AS MhzPerCore, first(CPUCores) AS CPUCores, first(cpuMhz) AS MhzPerCore by host,moid |  eval MaxCpuMhz=MhzPerCore*CPUCores | bucket MaxCpuMhz bins=5 |chart count by MaxCpuMhz

[OSs Installed On VMs]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Shows OSs installed with counts of VM  on all the VCs
dispatch.earliest_time = -8h
display.general.type = statistics
display.visualizations.show = 0
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:vm" host=* | spath moid OUTPUT=moid | spath changeSet.config.guestFullName output=OS |dedup host,moid |  stats count as "VMs count" by OS

[Virtual Machine - Count by Disk Usage Severity]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Virtual Machine- Count by Disk Usage Severity
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_disk_usage_kiloBytesPerSecond) from vmw_perf_disk_virtualmachine where host=* groupby moid,host | stats  avg(p_average_disk_usage_kiloBytesPerSecond) AS p_average_disk_usage_kiloBytesPerSecond by moid,host |  thresholdlookup perftype=disk, entitytype=VirtualMachine, metric=p_average_disk_usage_kiloBytesPerSecond, match=false  | chart count by threshold_severity

[Virtual Machine - Count by Memory Usage Severity]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Virtual Machine- Count by Memory Usage Severity
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = | `tstats` avg(p_average_mem_usage_percent) from vmw_perf_mem_virtualmachine where host=* groupby moid,host | stats  avg(p_average_mem_usage_percent) AS p_average_mem_usage_percent by moid,host |  thresholdlookup perftype=mem, entitytype=VirtualMachine, metric=p_average_mem_usage_percent, match=false | lookup Entity moid AS moid, host AS host OUTPUT name AS VirtualMachine | rename p_average_mem_usage_percent as "Avg Mem Usage"| chart count by threshold_severity

[Virtual Machine - Count by Number of Cores]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Virtual Machine- Count by Number of Cores
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:vm" host=*|  spath changeSet.config.hardware.numCoresPerSocket output=numCoresPerSocket | stats first(numCoresPerSocket) AS numCores by host, moid | chart count by numCores

[Virtual Machine - Count by Tools Status]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Virtual Machine- Count by Tools Status
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:vm" host=*| spath moid output=moid | spath collectionVersion output=collectionVersion | spath changeSet.name output=name | spath changeSet.guest.toolsStatus output=toolsStatus | stats first(name) AS name, first(toolsStatus) As toolsStatus by host, moid  | eval toolsStatus=if(isnull(toolsStatus), "Not Available", toolsStatus)  | rename name As VirtualMachine | chart count by toolsStatus

[Host System - Count by Status]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
description = Host System- Count by Status
dispatch.earliest_time = -8h
display.general.type = visualizations
request.ui_dispatch_app = splunk_for_vmware
search = sourcetype="vmware:inv:hostsystem" |spath changeSet.summary.overallStatus output=overallStatus | stats first(overallStatus) As status by host,moid | chart count by status

[SelectorHierarchy]
is_visible = false
action.email.inline = 1
cron_schedule = 5,20,35,50 * * * *
description = This search gives the current state of the hierarchy for TreeNav's. Note that it should be run on a time window of hierarchyinv_interval + hierarchyinv_expiration + [duration_of_hierarchyinv_collection]
dispatch.earliest_time = -8h
dispatch.latest_time = now
enableSched = 1
search = sourcetype=vmware:inv:hierarchy | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | search name!="" | lookup FullHierarchy host, moid as parent OUTPUT parent as grandparent parentType as grandparentType | eval parent=if(parentType=="ComputeResource", grandparent, parent) | eval parentType=if(parentType=="ComputeResource", grandparentType, parentType) | lookup FullHierarchy host, moid as parent OUTPUT parent as grandparent parentType as grandparentType name as parentName | eval parent=if(parentName=="host",grandparent,parent) | eval parentType=if(parentName=="host",grandparentType,parentType) | lookup FullHierarchy moid as grandparent OUTPUT name as grandParentName| eval parentName=if(parentName=="host",grandParentName,parentName)  | eval grandParentName=if(grandparentType=="ClusterComputeResource", grandParentName, "")|rename parent as uiparent parentType as uiparentType | table host moid name type uiparent uiparentType parentName rootFolderMoid grandParentName grandparentType|generateiit partial_matching=true
