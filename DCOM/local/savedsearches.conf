[F5_responsetime]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = F5 web app response time
dispatch.earliest_time = -24h
dispatch.latest_time = now
enableSched = 1
search = `F5_tpsrep(server_name=*, node=*)`| bucket _time span=1d |`f5_temps_reponse_moyen`|eval req_elapsed_time=round(req_elapsed_time,2)


[web_downtime]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
cron_schedule = */5 * * * *
description = Web service downtime in 1 day
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS` |timechart count  span=10s|where count=0|stats count(_time) as total|eval downtime=round(total/6,2)|fields downtime

[1app_uptime]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
cron_schedule = */5 * * * *
description = Web service downtime in 1 day
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS`|search [ |inputlookup append=t static_config  |search title=app_F5_overview|rename value as server_name| fields server_name ] |timechart count  span=5s|where count=0|stats count(_time) as total |eval sla=(1-round(total/12/60/24,2))*100| thresholdlookup entitytype=Loadbalancer,perftype=critical_app,metric=uptime,match=true| eval class=case(sla-threshold_critlevel<0, "severe",sla-threshold_warnlevel<0,"elevated", 1=1, "low")|fields  sla, class

[d_home_proactive_monitoring_row1_col2_gauge1]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.track = 0
cron_schedule = 0 0 * * *
disabled = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.chart = radialGauge
display.visualizations.charting.chart.style = minimal
display.visualizations.charting.gaugeColors = [0x79c442, 0xffd800,0xd93705,0xd93705]
enableSched = 1
is_visible = 1

[F5_resp-table]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -7d@d
cron_schedule = 0 0 * * *
description = Tableau de temps de reponse moyen par service
dispatch.earliest_time = rt-10m
dispatch.latest_time = rt
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS`  | stats count by req_elapsed_time client_address node server_name url _time             | stats avg(req_elapsed_time)   by server_name| rangemap field="avg(req_elapsed_time)"  low=0-5 elevated=6-15 default=severe |eval State=range|fields State, server_name

[Datastore_overview]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
description = overview du datastore
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = sourcetype="vmware:inv:datastore"  | spath moid | spath changeSet.summary.accessible output=accessible | spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace | spath changeSet.summary.uncommitted output=uncommitted | spath changeSet.summary.url output=url | spath changeSet.summary.type output=type | spath changeSet.summary.name output=name | table _time, moid, host, name, url, accessible, capacity, freeSpace, uncommitted, type | stats first(name) as name first(freeSpace) as freeSpace first(capacity) as capacity first(accessible) as accessible first(uncommitted) as uncommitted by host, moid | fillnull value=0 uncommitted | eval totalSpace=tostring(round((capacity)/(1024*1024*1024), 2)) | eval RemainingCapacity_GB=tostring(round((freeSpace)/(1024*1024*1024), 2)) | eval Committed_GB=totalSpace-RemainingCapacity_GB | eval spaceAfterUncommitedAllocation=freeSpace-uncommitted | eval provisionedAmount=capacity-spaceAfterUncommitedAllocation | eval overprovisionedPct=round(if(provisionedAmount!=0,(provisionedAmount/capacity)-1,0)*100,2) | thresholdlookup entitytype=Datastore,perftype=inv,metric=RemainingCapacity_GB,match=true| eval warnLevel=(totalSpace-threshold_warnlevel) | eval critLevel=(totalSpace-threshold_critlevel) | rename totalSpace as Capacity_GB, name as Datastore, overprovisionedPct as Overprovisioned_pct | eval Type="Datastore" | search Datastore=* |eval State=case(critLevel-Committed_GB<0,"2",warnLevel-Committed_GB<0,"1",1=1,"0") | rangemap field=State  low=0-0 elevated=1-1 default=severe|eval State=range| table State  Datastore host

[Datastore_overview_nolow]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
description = overview du datastore
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = sourcetype="vmware:inv:datastore" earliest=-24h latest=now | spath moid | spath changeSet.summary.accessible output=accessible | spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace | spath changeSet.summary.uncommitted output=uncommitted | spath changeSet.summary.url output=url | spath changeSet.summary.type output=type | spath changeSet.summary.name output=name | table _time, moid, host, name, url, accessible, capacity, freeSpace, uncommitted, type | stats first(name) as name first(freeSpace) as freeSpace first(capacity) as capacity first(accessible) as accessible first(uncommitted) as uncommitted by host, moid | fillnull value=0 uncommitted | eval totalSpace=tostring(round((capacity)/(1024*1024*1024), 2)) | eval RemainingCapacity_GB=tostring(round((freeSpace)/(1024*1024*1024), 2)) | eval Committed_GB=totalSpace-RemainingCapacity_GB | eval spaceAfterUncommitedAllocation=freeSpace-uncommitted | eval provisionedAmount=capacity-spaceAfterUncommitedAllocation | eval overprovisionedPct=round(if(provisionedAmount!=0,(provisionedAmount/capacity)-1,0)*100,2) | thresholdlookup entitytype=Datastore,perftype=inv,metric=RemainingCapacity_GB,match=true| eval warnLevel=(totalSpace-threshold_warnlevel) | eval critLevel=(totalSpace-threshold_critlevel) | rename totalSpace as Capacity_GB, name as Datastore, overprovisionedPct as Overprovisioned_pct| eval Type="Datastore" | search Datastore=* |eval State=case(critLevel-Committed_GB<0,"2",warnLevel-Committed_GB<0,"1",1=1,"0") | rangemap field=State  low=0-0 elevated=1-1 default=severe|eval State=range|search State!=low| table State  Datastore host

[F5_resp_table_single]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = scatter
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS`  | stats count by req_elapsed_time client_address node server_name url _time             | stats avg(req_elapsed_time) as resp   by server_name|thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|eval warn2=resp-threshold_warnlevel|eval warn=if(warn2>0,"1","0")|search warn!=0|stats count

[F5_resp_table_singleSLA]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = scatter
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS`  | stats count by req_elapsed_time client_address node server_name url _time        |bucket span=10s _time     | stats avg(req_elapsed_time) as resp   by server_name _time|thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|eval warn2=resp-threshold_warnlevel|eval warn=if(warn2>0,"1","0")|search warn!=0|stats count|eval count=count*10

[LB_max_over_sla]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = scatter
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS`  | stats count by req_elapsed_time client_address node server_name url _time        |bucket span=10s _time     | stats avg(req_elapsed_time) as resp   by server_name _time|thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|eval warn2=resp-threshold_warnlevel|eval warn=if(warn2>0,"1","0")|search warn!=0|stats count|eval count=count*10

[LB_SLA_per_app]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS` earliest=-10m latest=now | stats count by req_elapsed_time client_address node server_name url _time    | stats avg(req_elapsed_time)   by server_name| rangemap field="avg(req_elapsed_time)"  low=0-5 elevated=6-15 default=severe |eval State=range|fields State, server_name|appendcols [search `F5LTMACCCESS` earliest = -15m latest=now  | stats count by req_elapsed_time client_address node server_name url _time        |bucket span=1s _time     | stats max(req_elapsed_time) as resp   by server_name _time|thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|eval warn2=resp-threshold_warnlevel|eval warn=if(warn2>0,"1","0")|where warn!=0|chart  count as "total seconds of SLA violation in 15min" sparkline by server_name]

[Average Response Time by DNS Server-1j]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 18 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Response Time, msec
display.visualizations.charting.axisY.scale = log
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.legend.placement = bottom
enableSched = 1
search = `netflow_search_rule_20004`            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | timechart avg(avg_time) by dest_ip useother="f"


[hypervisor_row1_col2_gauge1]
disabled = false
is_visible = true
search = | `tstats` p_average_mem_vmmemctl_kiloBytes from vmw_perf_mem_hostsystem groupby _time, moid, host | table _time, p_average_mem_vmmemctl_kiloBytes moid host | thresholdlookup perftype=mem, entitytype=HostSystem, metric=p_average_mem_vmmemctl_kiloBytes, match=false | stats count(eval(threshold_severity!="unknown")) AS TotalHosts count(eval(threshold_severity="critical")) AS HighHosts by host, moid | stats count AS TotalHosts count(eval(HighHosts>0)) AS HighHosts by host, moid |where HighHosts>0|eval alert="High_Mem_ballooning"|rename host as Cluster, moid as Host|fields alert Host Cluster

[hypervisor_row1_col2_gauge2]
disabled = false
is_visible = true
search = | `tstats` p_average_mem_llSwapUsed_kiloBytes from vmw_perf_mem_hostsystem groupby _time, moid, host | table _time, p_average_mem_llSwapUsed_kiloBytes moid host | thresholdlookup perftype=mem, entitytype=HostSystem, metric=p_average_mem_llSwapUsed_kiloBytes, match=false | stats count(eval(threshold_severity!="unknown")) AS TotalHosts count(eval(threshold_severity="critical")) AS HighHosts by host, moid | stats count AS TotalHosts count(eval(HighHosts>0)) AS HighHosts by host, moid |where HighHosts>0|eval alert="High_Mem_swapping"|rename host as Cluster, moid as Host|fields alert Host Cluster

[hypervisor_row1_col2_gauge3]
disabled = false
is_visible = true
search = | `tstats` avg(p_average_cpu_usage_percent) from vmw_perf_cpu_hostsystem groupby moid, host | stats avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by moid, host | thresholdlookup perftype=cpu, entitytype=HostSystem, metric=p_average_cpu_usage_percent, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalHosts count(eval(threshold_severity="critical")) AS HighHosts by moid, host|where HighHosts>0|eval alert="High_CPU_Host"|rename host as Cluster, moid as Host|fields alert Host Cluster

[hypervisor_row1_col1_gauge1]
disabled = false
is_visible = true
search = | `tstats` avg(p_average_cpu_usage_percent) from vmw_perf_cpu_virtualmachine groupby moid, host | stats avg(p_average_cpu_usage_percent) AS p_average_cpu_usage_percent by moid, host | thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_average_cpu_usage_percent, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalVMs count(eval(threshold_severity="critical")) AS HighCPUVms by moid, host|where HighCPUVms>0|eval alert="High_CPU"|rename host as Cluster, moid as VM|fields alert VM Cluster

[hypervisor_row1_col1_gauge2]
disabled = false
is_visible = true
search = | `tstats` avg(p_average_mem_usage_percent) from vmw_perf_mem_virtualmachine groupby moid, host | stats avg(p_average_mem_usage_percent) AS p_average_mem_usage_percent by moid, host | thresholdlookup perftype=mem, entitytype=VirtualMachine, metric=p_average_mem_usage_percent, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalVMs count(eval(threshold_severity="critical")) AS HighMemVms by moid, host|where HighMemVms>0|eval alert="High_Memory"|rename host as Cluster, moid as VM|fields alert VM Cluster

[hypervisor_row1_col1_gauge3]
disabled = false
is_visible = true
search = | `tstats` avg(p_summation_cpu_ready_millisecond) from vmw_perf_cpu_virtualmachine groupby moid, host | stats avg(p_summation_cpu_ready_millisecond) AS p_summation_cpu_ready_millisecond by moid, host | thresholdlookup perftype=cpu, entitytype=VirtualMachine, metric=p_summation_cpu_ready_millisecond, match=false  | stats count(eval(threshold_severity!="unknown")) AS TotalVMs count(eval(threshold_severity="critical")) AS HighSumRdyVms by moid,host|where HighSumRdyVms>0|eval alert="High_CPU_Sum_ready_time"|rename host as Cluster, moid as VM|fields alert VM Cluster

[WAN Link A: Top Traffic by Destination IP-1j]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.overlayFields = "WAN link"
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
enableSched = 1
search = `netflow_search_rule_20067`            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`     | search [ |inputlookup append=t static_config  |search title=WAN_1|rename value as exp_ip| fields exp_ip ]              | `sampling(bytes_in)`           | `format_ip_column(src_ip, src_ip, src_host)`           | `per_second_chart(megabits, bytes_in*8/1000000, sum(megabits) by dest_ip)`|join[|inputlookup append=t static_config  |search title=WAN_1|rename value2 as WAN_link|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warning=threshold_warnlevel*WAN_link/100|fields warning, WAN_link]

[WAN Link B: Top Traffic by Destination IP-1j]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.overlayFields = "WAN link"
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
enableSched = 1
search = `netflow_search_rule_20067`            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`     | search [ |inputlookup append=t static_config  |search title=WAN_2|rename value as exp_ip| fields exp_ip ]              | `sampling(bytes_in)`           | `format_ip_column(dest_ip, dest_ip, dest_host)`           | `per_second_chart(megabits, bytes_in*8/1000000, sum(megabits) by dest_ip)`|join[|inputlookup append=t static_config  |search title=WAN_2|rename value2 as WAN_link|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warning=threshold_warnlevel*WAN_link/100|fields warning, WAN_link]


[Top Traffic by Port and Protocol-1j]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
enableSched = 1
search = `netflow_search_rule_20067`            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | lookup protocol_lookup protocol AS protocol            | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`           | `sampling(bytes_in)`           | `format_port_column(dest_port_string, dest_port)`           | `per_second_chart(megabits, bytes_in*8/1000000, sum(megabits) by dest_port_string)`

[WAN Link A: Top Traffic by Source IP-1jour]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.axisY2.maximumNumber = 20
display.visualizations.charting.axisY2.minimumNumber = 10
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.overlayFields = "WAN link"
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
enableSched = 1
search = `netflow_search_rule_20067`            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`     | search [ |inputlookup append=t static_config  |search title=WAN_1|rename value as exp_ip| fields exp_ip ]              | `sampling(bytes_in)`           | `format_ip_column(src_ip, src_ip, src_host)`           | `per_second_chart(megabits, bytes_in*8/1000000, sum(megabits) by src_ip)`|join[|inputlookup append=t static_config  |search title=WAN_1|rename value2 as WAN_link|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warning=threshold_warnlevel*WAN_link/100|fields warning, WAN_link]

[WAN Link B: Top Traffic by Source IP-1jour]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.axisY2.maximumNumber = 20
display.visualizations.charting.axisY2.minimumNumber = 10
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.overlayFields = "WAN link"
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
enableSched = 1
search = `netflow_search_rule_20067`            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`     | search [ |inputlookup append=t static_config  |search title=WAN_2|rename value as exp_ip| fields exp_ip ]              | `sampling(bytes_in)`           | `format_ip_column(src_ip, src_ip, src_host)`           | `per_second_chart(megabits, bytes_in*8/1000000, sum(megabits) by src_ip)`|join[|inputlookup append=t static_config  |search title=WAN_2|rename value2 as WAN_link|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warning=threshold_warnlevel*WAN_link/100|fields warning, WAN_link]

[1app_responsetime]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
description = F5 web app response time
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
enableSched = 1
search = `F5LTMACCCESS`|search [ |inputlookup append=t static_config  |search title=app_F5_overview|rename value as server_name| fields server_name ]`F5_tpsrep_short`| bucket _time span=1d |`f5_temps_reponse_moyen`|eval req_elapsed_time=round(req_elapsed_time,2)| thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true| eval class=case(req_elapsed_time-threshold_critlevel>0, "severe",req_elapsed_time-threshold_warnlevel>0,"elevated", 1=1, "low")|fields  req_elapsed_time, class

[WAN_link2_alert]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.axisY2.maximumNumber = 20
display.visualizations.charting.axisY2.minimumNumber = 10
display.visualizations.charting.chart = scatter
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.overlayFields = "WAN link"
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `netflow_search_rule_20067`          | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`           | `sampling(bytes_in)`     | search [ |inputlookup append=t static_config  |search title=WAN_2|rename value as exp_ip| fields exp_ip ]           | `format_ip_column(src_ip, src_ip, src_host)`          |bucket span=10s _time    | `per_second_chart_dcom_wan(megabits, bytes_in*8/1000000, sum(megabits) as tot)`|join [|inputlookup append=t static_config  |search title=WAN_2|rename value2 as throughput| fields throughput]|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warn=threshold_warnlevel*throughput/100| eval State=case(tot-warn>0 ,"1", 1=1,"0")|search State=1|stats count |eval time=count*10|fields time

[WAN_link1_alert]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.axisY2.maximumNumber = 20
display.visualizations.charting.axisY2.minimumNumber = 10
display.visualizations.charting.chart = scatter
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.overlayFields = "WAN link"
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `netflow_search_rule_20067`          | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | `fix_src_ip_mapping`           | `fix_dest_ip_mapping`           | `sampling(bytes_in)`     | search [ |inputlookup append=t static_config  |search title=WAN_1|rename value as exp_ip| fields exp_ip ]       | `format_ip_column(src_ip, src_ip, src_host)`          |bucket span=10s _time    | `per_second_chart_dcom_wan(megabits, bytes_in*8/1000000, sum(megabits) as tot)`|join [|inputlookup append=t static_config  |search title=WAN_1|rename value2 as throughput| fields throughput]|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warn=threshold_warnlevel*throughput/100| eval State=case(tot-warn>0 ,"1", 1=1,"0")|search State=1|stats count |eval time=count*10|fields time

[QOS : Outbound Traffic-1j]
action.email.reportServerEnabled = 0
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = visualizations
display.visualizations.charting.axisTitleX.text = Time
display.visualizations.charting.axisTitleY.text = Mbps
display.visualizations.charting.chart = area
display.visualizations.charting.chart.nullValueMode = zero
display.visualizations.charting.chart.stackMode = stacked
display.visualizations.charting.legend.placement = none
enableSched = 1
search = `netflow_search_rule_20065`           | eval dest_tos = if(isnull(dest_tos), 0, dest_tos)            | eval dest_decimal=floor((dest_tos)/4)            | lookup diffserv_lookup decimal AS dest_decimal OUTPUT bitmap AS dest_bitmap DSCP AS dest_dscp            | eval dest_bitmap = if(dest_bitmap = "000000", 0, ltrim(dest_bitmap, "0"))            | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group           | lookup protocol_lookup protocol AS protocol            | `sampling(bytes_in)`            | strcat dest_bitmap " (" dest_dscp ")" qos_string            | `per_second_chart(megabits, bytes_in*8/1000000, sum(megabits) by qos_string)`

[Slow_answer_rate]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
description = taux de reponse dont le temps ne respecte pas les SLAs
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = sourcetype="F5:iRule:WebAccess"   | thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|  eval req=req_elapsed_time-threshold_warnlevel|stats count(eval(req>0)) as Warning count as Total   by server_name|eval tx_warn=round(Warning/Total*100,2)|rename tx_warn as "slow answer rate in %" |fields "slow answer rate in %" server_name| sort - "slow answer rate in %"

[Slow_answer_rate2]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
description = taux de reponse dont le temps ne respecte pas les SLAs
dispatch.earliest_time = -1d@
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `F5LTMACCCESS`   | thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|  eval req=req_elapsed_time-threshold_warnlevel|stats count(eval(req>0)) as Warning count as Total avg(req_elapsed_time) as "avg response time" sparkline(avg(req_elapsed_time)) as "graph avg response time"  by server_name|eval tx_warn=round(Warning/Total*100,2)| thresholdlookup entitytype=Loadbalancer,perftype=http,metric=ratio_above_resptime,match=true|eval State=case(tx_warn-threshold_critlevel>0, "severe",tx_warn-threshold_warnlevel>0,"elevated", 1=1, "low") |rename tx_warn as "slow answer rate in %" | makemv delim="," setsv=true "graph avg response time"|fields State, "slow answer rate in %", "avg response time",server_name,"graph avg response time"| sort - "slow answer rate in %"

[Slow_answer_rate_sumup]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
description = taux de reponse dont le temps ne respecte pas les SLAs
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = verbose
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.charting.chart.nullValueMode = connect
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = sourcetype="F5:iRule:WebAccess"   | thresholdlookup entitytype=Loadbalancer,perftype=http,metric=resptime,match=true|  eval req=req_elapsed_time-threshold_warnlevel|stats count(eval(req>0)) as Warning count as Total   by server_name|eval tx_warn=Warning/Total*100|stats count(eval(tx_warn>5)) as count

[summary_WAN_2]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.summary_index = 1
action.summary_index.WAN_link = 2
action.summary_index._name = summary_network
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = summary index du wan 2
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
enableSched = 1
realtime_schedule = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `netflow_search_rule_20067` | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group | `fix_src_ip_mapping` | `fix_dest_ip_mapping` | `sampling(bytes_in)` | search [ |inputlookup static_config |search title=WAN_2|rename value as exp_ip| fields exp_ip ]| `format_ip_column(src_ip, src_ip, src_host)` | `per_second_chart_dcom(megabits, bytes_in*8/1000000, sum(megabits) as tot)`| join[|inputlookup static_config |search title=WAN_2|rename value2 as throughput|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warn=threshold_warnlevel*throughput/100|eval crit=threshold_critlevel*throughput/100|fields warn, crit]|eval state=case( tot>crit,2,tot>warn,1)|sitimechart span=1h avg(tot) as "used_bandwidth" max(tot) as "max_seen" count(eval(state=1)) as warningcount count(eval(state=2)) as criticalcount

[summary_WAN_1]
action.summary_index = 1
action.summary_index.WAN_link = 1
action.summary_index._name = summary_network
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = summary index du wan 1
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
enableSched = 1
realtime_schedule = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = `netflow_search_rule_20067` | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group | `fix_src_ip_mapping` | `fix_dest_ip_mapping` | `sampling(bytes_in)` | search [ |inputlookup static_config |search title=WAN_1|rename value as exp_ip| fields exp_ip ]| `format_ip_column(src_ip, src_ip, src_host)` | `per_second_chart_dcom(megabits, bytes_in*8/1000000, sum(megabits) as tot)`| join[|inputlookup static_config |search title=WAN_1|rename value2 as throughput|thresholdlookup entitytype=Netflow,perftype=bandwidth,metric=WAN_link,match=true|eval warn=threshold_warnlevel*throughput/100|eval crit=threshold_critlevel*throughput/100|fields warn, crit]|eval state=case( tot>crit,2,tot>warn,1)|sitimechart span=1h avg(tot) as "used_bandwidth" max(tot) as "max_seen" count(eval(state=1)) as warningcount count(eval(state=2)) as criticalcount

[summary_CPU_1d]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.summary_index = 1
action.summary_index._name = summary_vmware_cpu
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = summary indexing on 1 day for cpu
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
enableSched = 1
realtime_schedule = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = | `tstats` avg(p_average_cpu_usagemhz_megaHertz) max(p_average_cpu_usagemhz_megaHertz) dc(moid) values(ccr) values(moid) values(host) from vmw_perf_cpu_virtualmachine where * instance="aggregated" groupby _time, host span=1m| stats avg(p_average_cpu_usagemhz_megaHertz) as avg_usagemhz_megaHertz, max(p_average_cpu_usagemhz_megaHertz) as max_usagemhz_megaHertz, dc(moid) as num_vms by _time host | eval TotUsg_avg_mhz=avg_usagemhz_megaHertz*num_vms|join host[| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHierarchy" | search (type="HostSystem" AND uiparentType="ClusterComputeResource") OR type="ClusterComputeResource" | eval uiparent=if(type=="ClusterComputeResource", moid, uiparent) | eventstats dc(moid) as members by uiparent, host|eval hostCount=(members-1) | search type=ClusterComputeResource| dedup moid,host|`SetHandleInfoMaxTimeNow`|lookup TimeClusterServicesAvailability host AS host, moid AS uiparent OUTPUT p_average_clusterServices_effectivecpu_megaHertz|eval SafeEffCpu_MHz=floor(p_average_clusterServices_effectivecpu_megaHertz*((hostCount-1)/hostCount)) ]|bucket _time  span=1h|sistats first(SafeEffCpu_MHz) as SafeEffCpu_MHz first(p_average_clusterServices_effectivecpu_megaHertz) as p_average_clusterServices_effectivecpu_megaHertz avg(TotUsg_avg_mhz) as TotUsg_avg_mhz max(TotUsg_avg_mhz) as max_TotUsg_avg_mhz first(num_vms) as num_vms first(moid) as moid first(hostCount) as hosCount first(name) as name first(uiparent) as uiparent by _time, host

[summary_MEM_1d]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.summary_index = 1
action.summary_index._name = summary_vmware_mem
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = Summary index for memory over 1 day
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
display.visualizations.charting.chart = line
display.visualizations.show = 0
enableSched = 1
realtime_schedule = 0
request.ui_dispatch_app = DCOM_S
request.ui_dispatch_view = search
search = |`tstats` avg(p_average_mem_overhead_kiloBytes) avg(p_average_mem_consumed_kiloBytes) dc(moid) values(moid) first(ccr) from vmw_perf_mem_virtualmachine groupby host, _time span=1m | stats avg(p_average_mem_overhead_kiloBytes) as p_average_mem_overhead_kiloBytes, avg(p_average_mem_consumed_kiloBytes) as p_average_mem_consumed_kiloBytes, dc(moid) as num_vms, first(ccr) as moid by _time, host| eval TotConsum_KB=p_average_mem_consumed_kiloBytes*num_vms | eval TotOverhd_KB=p_average_mem_overhead_kiloBytes*num_vms | eval TotalCurrentUsage = TotOverhd_KB+TotConsum_KB|join host[| loadjob savedsearch="admin:SA-VMW-HierarchyInventory:CurrentHierarchy" | search (type="HostSystem" AND uiparentType="ClusterComputeResource") OR type="ClusterComputeResource" | eval uiparent=if(type=="ClusterComputeResource", moid, uiparent) | eventstats dc(moid) as members by uiparent, host|eval hostCount=(members-1)| search type=ClusterComputeResource| dedup moid,host|`SetHandleInfoMaxTimeNow`|lookup TimeClusterServicesAvailability host AS host, moid AS uiparent OUTPUT p_average_clusterServices_effectivemem_megaBytes|eval SafeEffMem_megaBytes=floor(p_average_clusterServices_effectivemem_megaBytes*((hostCount-1)/hostCount))]| eval TotalCapacity=p_average_clusterServices_effectivemem_megaBytes*1024| eval SafeUsage = SafeEffMem_megaBytes*1024| eval SafeUsage=`BytesToGigaBytes(SafeUsage*1024)`| eval TotalCapacity=`BytesToGigaBytes(TotalCapacity*1024)`| eval TotalCurrentUsage=`BytesToGigaBytes(TotalCurrentUsage*1024)`|bucket _time span=1h|sistats  avg(TotalCurrentUsage) as avg_TotalCurrentUsage max(TotalCurrentUsage) as max_TotalCurrentUsage avg(TotalCapacity) as TotalCapacity avg(SafeUsage) as SafeUsage first(num_vms) as num_vms first(moid) as moid first(hostCount) as hostCount first(name) as name  by  _time,host

