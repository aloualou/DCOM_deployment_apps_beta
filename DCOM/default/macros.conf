#
#app Telindus DCOM
#Version 0.1 novembre 2014
#Simon Duchene
#


#Exemple : 

##[netflow_index]
##definition = index=flowintegrator sourcetype=flowintegrator

##[netflow_search_traffic_rules]
##definition = `netflow_index` (nfc_id=20004 OR nfc_id=20005 OR nfc_id=20011 OR nfc_id=20017 OR nfc_id=20063 OR nfc_id=20067 OR nfc_id=20068 OR nfc_id=20064 OR nfc_id=20065 OR nfc_id=20066)

########################################Partie VMWARE
[inv]
definition = index=vmware-inv

[vm_base_datastore]
definition = `inv` sourcetype =vmware:inv:datastore| spath moid output=moid | spath changeSet.info.name output=name |spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace| eval freeSpace=freeSpace/1024/1024/1024|eval capacity=capacity/1024/1024/1024|eval occupe=capacity-freeSpace
#a verifier

[vm_evo_volum]
#definition = `inv` `vm_base_datastore` |search [search 'vm_base_datastore'|eval percentoccup=(total-libre)/total|where percentoccup > 0.70|fields name] |timechart avg(freeSpace) as "freespace", avg(capacity) as "total capacity" by name
definition = sourcetype = "vmware:inv:datastore"  | spath moid output=moid | spath changeSet.info.name output=name |search [search sourcetype="vmware:inv:datastore"  | spath moid output=moid | spath changeSet.info.name output=name | spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace |  stats avg(freeSpace) as "libre", avg(capacity) as "total"  by name|eval percentoccup=(total-libre)/total|where percentoccup > 0.70|fields name]| spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace |timechart avg(freeSpace) as "freespace", avg(capacity) as "total capacity" by name
#a verifier

[vm_datastore_suivi]
definition = `inv` `vm_base_datastore`|chart first(freeSpace) as "freespace", first(capacity) as "capacity" by name 
#a verifier

[vm_datastore_suivi_percent]
definition = `inv` `vm_base_datastore`|chart first(freeSpace) as "freespace", first(capacity) as "capacity" by name |eval percent_free=freespace/capacity*100
#a verifier
[vm_dts_global]
definition = sourcetype="vmware:inv:datastore" earliest=-24h latest=now | spath moid | spath changeSet.summary.accessible output=accessible | spath changeSet.summary.capacity output=capacity | spath changeSet.summary.freeSpace output=freeSpace | spath changeSet.summary.uncommitted output=uncommitted | spath changeSet.summary.url output=url | spath changeSet.summary.type output=type | spath changeSet.summary.name output=name | table _time, moid, host, name, url, accessible, capacity, freeSpace, uncommitted, type | stats first(name) as name first(freeSpace) as freeSpace first(capacity) as capacity first(accessible) as accessible first(uncommitted) as uncommitted by host, moid | fillnull value=0 uncommitted | eval totalSpace=tostring(round((capacity)/(1024*1024*1024), 2)) | eval RemainingCapacity_GB=tostring(round((freeSpace)/(1024*1024*1024), 2)) | eval Committed_GB=totalSpace-RemainingCapacity_GB | eval spaceAfterUncommitedAllocation=freeSpace-uncommitted | eval provisionedAmount=capacity-spaceAfterUncommitedAllocation | eval overprovisionedPct=round(if(provisionedAmount!=0,(provisionedAmount/capacity)-1,0)*100,2) | thresholdlookup entitytype=Datastore,perftype=inv,metric=RemainingCapacity_GB,match=true| eval warnLevel=(totalSpace-threshold_warnlevel) | eval critLevel=(totalSpace-threshold_critlevel) | rename totalSpace as Capacity_GB, name as Datastore, overprovisionedPct as Overprovisioned_pct| eval Type="Datastore" | search Datastore=* |eval State=case(critLevel-Committed_GB<0,"2",warnLevel-Committed_GB<0,"1",1=1,"0") | rangemap field=State  low=0-0 elevated=1-1 default=severe|eval State=range| table State  Datastore host RemainingCapacity_GB  Overprovisioned_pct Capacity_GB|sort + RemainingCapacity_GB
[vm_sto_moyen]
definition =`inv` vmware:inv:vm"    | spath moid  | spath changeSet.summary.runtime.powerState output=powerState   | search powerState=*on| chart avg("changeSet.summary.storage.committed

[vm_active_host]
definition = `inv` sourcetype="vmware:inv:vm"  | spath moid | spath changeSet.summary.runtime.powerState output=powerState | spath changeSet.summary.runtime.host.moid output=hmoid |search powerState=*on|stats dc(moid) by hmoid

[vm_nb_hosts]
definition = `inv` sourcetype="vmware:inv*"  | stats dc(host)

[vm_nb_datastore]
definition =`inv`  sourcetype="vmware:inv*"  | spath changeSet.storage.perDatastoreUsage{}.datastore.moid output=datastoremoid |stats dc(datastoremoid)

[vm_sto_moyen_libconso]
definition =`inv`  `vm_base_datastore`|eval percentoccup=occupe/capacity*100|stats  first(freeSpace) as "freespace in Gb", first(occupe) as "used in Gb" by name |sort - "used in Gb"

[vm_vol_actu]
definition = `inv` `vm_base_datastore`|eval percentoccup=occupe/capacity*100|stats  first(capacity) as "capacity in Gb", first(percentoccup) as "% used" by name |sort - "% used"

[vm_zombieglouton]
definition = (sourcetype="vmware:perf:cpu" source="VMPerf:VirtualMachine") OR (sourcetype="vmware:inv:vm" changeSet.name=*) | eval detect = if(p_average_cpu_usage_percent < 5.00, "Very_Low_CPU_Comsumption", if(p_average_cpu_usage_percent > 80.00, "High_CPU_Comsumption", "normal_CPU_Comsumption")) 
[vm_zg_table]
definition = `vm_zombieglouton` | stats first(detect) as "CPU Status" by moid |rename moid as VM |sort + "CPU Status" 
[vm_zg_table_Low]
definition = `vm_zombieglouton` | stats first(detect) as "CPU Status" by moid |rename moid as VM
[vm_zg_table_High]
definition = `vm_zombieglouton` | stats first(detect) as "CPU Status" by moid |rename moid as VM
[vm_zg_graph]
definition = `vm_zg_table`|stats count by "CPU Status"

[vm_evonb_esx]
definition =`inv`  sourcetype="vmware:inv*"  | timechart dc(host) span=1w

[vm_photo_libre]
definition = `inv` `vm_base_datastore`|stats first(freeSpace) as "espace libre" by name

[vm_cpu_host]
definition = `inv` sourcetype="vmware:inv:hostsystem" | spath moid output=moid | spath changeSet.name output=name | spath collectionVersion output=collectionVersion | spath changeSet.summary.overallStatus output=overallStatus | spath changeSet.summary.quickStats.overallCpuUsage output=overallCpuUsage | spath changeSet.summary.quickStats.overallMemoryUsage output=overallMemoryUsage | spath changeSet.summary.hardware.cpuMhz output=cpuMhz | spath changeSet.summary.hardware.memorySize output=memorySize | spath changeSet.summary.hardware.numCpuCores output=CPUCores | spath changeSet.summary.hardware.vendor output=manufacturer | spath changeSet.summary.hardware.model output=model | spath changeSet.summary.hardware.numNics output=numNics | spath changeSet.summary.hardware.cpuModel output=processorType | spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs | spath changeSet.summary.hardware.numCpuThreads output=logicalProcessor | spath changeSet.config.hyperThread.active output=active | spath changeSet.summary.host.moid output=HostSystem | spath changeSet.parent.moid output=HostSystemParent | spath changeSet.parent.type output=HostSystemParentType |stats avg(overallCpuUsage) by name

[vm_ram_host]
definition = `inv` sourcetype="vmware:inv:hostsystem" | spath moid output=moid | spath changeSet.name output=name | spath collectionVersion output=collectionVersion | spath changeSet.summary.overallStatus output=overallStatus | spath changeSet.summary.quickStats.overallCpuUsage output=overallCpuUsage | spath changeSet.summary.quickStats.overallMemoryUsage output=overallMemoryUsage | spath changeSet.summary.hardware.cpuMhz output=cpuMhz | spath changeSet.summary.hardware.memorySize output=memorySize | spath changeSet.summary.hardware.numCpuCores output=CPUCores | spath changeSet.summary.hardware.vendor output=manufacturer | spath changeSet.summary.hardware.model output=model | spath changeSet.summary.hardware.numNics output=numNics | spath changeSet.summary.hardware.cpuModel output=processorType | spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs | spath changeSet.summary.hardware.numCpuThreads output=logicalProcessor | spath changeSet.config.hyperThread.active output=active | spath changeSet.summary.host.moid output=HostSystem | spath changeSet.parent.moid output=HostSystemParent | spath changeSet.parent.type output=HostSystemParentType |stats avg(overallMemoryUsage) by name

[vm_ram_type]
definition = `inv` sourcetype="vmware:inv:hostsystem" | spath moid output=moid | spath changeSet.name output=name | spath collectionVersion output=collectionVersion | spath changeSet.summary.overallStatus output=overallStatus | spath changeSet.summary.quickStats.overallCpuUsage output=overallCpuUsage | spath changeSet.summary.quickStats.overallMemoryUsage output=overallMemoryUsage | spath changeSet.summary.hardware.cpuMhz output=cpuMhz | spath changeSet.summary.hardware.memorySize output=memorySize | spath changeSet.summary.hardware.numCpuCores output=CPUCores | spath changeSet.summary.hardware.vendor output=manufacturer | spath changeSet.summary.hardware.model output=model | spath changeSet.summary.hardware.numNics output=numNics | spath changeSet.summary.hardware.cpuModel output=processorType | spath changeSet.summary.hardware.numCpuPkgs output=numCpuPkgs | spath changeSet.summary.hardware.numCpuThreads output=logicalProcessor | spath changeSet.config.hyperThread.active output=active | spath changeSet.summary.host.moid output=HostSystem | spath changeSet.parent.moid output=HostSystemParent | spath changeSet.parent.type output=HostSystemParentType |stats avg(overallMemoryUsage) by model

#Partie Reseau
#Pour netflow, il faut modifier les droits d'accès sur le macros de l'app netflow.

################################"#Partie PAN


[pan_groupby(1)]
args = fields
definition = "GROUPBY " + "$fields$" + " | rename " + replace(replace("$fields$", "^.*?log\.(.*)", "log.\1"), "log.([^ ]*)", "log.\1 AS \1")
iseval = true

[pan_index]
definition = index=pan_logs

[pan_tstats]
definition = tstats summariesonly=t
# definition = tstats prestats=true local=`tstats_local`

[node(1)]
args = nodename
definition = datamodel="pan_logs" WHERE nodename="$nodename$"



[pan_threat]
definition = `pan_index` sourcetype="pan_threat" (log_subtype!="file" AND log_subtype!="url" AND log_subtype!="data" AND log_subtype!="wildfire")

[pan_threat_all]
definition = `pan_index` sourcetype="pan_threat"

[pan_traffic]
definition = `pan_index` sourcetype="pan_traffic"

########################
# macros used internally by dashboards
########################

[_pan_dropdown(2)]
args = node, field
definition = tstats summariesonly=t count FROM datamodel="pan_logs" WHERE nodename="$node$" groupby $field$ | rename $field$ as field | eval field_with_count = field . " (" . count . ")"

[top]
definition = sort -count | head 999

[top(1)]
args = num
definition = sort -count | head $num$

[groupby(1)]
args = fields
definition = "GROUPBY " + "$fields$" + " | rename " + replace(replace("$fields$", "^.*?log\.(.*)", "log.\1"), "log.([^ ]*)", "log.\1 AS \1")
iseval = true

[table(1)]
args = fields
definition = "GROUPBY " + "$fields$" + " | rename " + replace(replace("$fields$", "^.*?log\.(.*)", "log.\1"), "log.([^ ]*)", "log.\1 AS \1") + " | table " + replace("$fields$", "log.([^ ]*)", "\1")
iseval = true

[table(2)]
args = fields, count
definition = `table($fields$)` $count$ | `top`

###########################Partie F5
[F5LTMDCFW]
definition = sourcetype="F5:AFM:Syslog"

[F5LTMSYSLOG]
definition = sourcetype="F5:LTM:SYSLOG"


[F5LTMACCCESS]
definition = sourcetype="F5:iRule:WebAccess"

[F5_nomnode]
definition= `F5LTMACCCESS`|stats values(node) as Node
[F5_nbnode]
definition= `F5LTMACCCESS`| bucket _time span=1d |stats dc(node) as Node
[F5_nomserveur]
definition= `F5LTMACCCESS`|stats values(server_name) as "Target_server"
[F5_nbserveur]
definition= `F5LTMACCCESS`| bucket _time span=1d |stats dc(server_name) as "Target_server"

[F5_tpsrep]
definition = `F5LTMACCCESS` | stats count by req_elapsed_time client_address node server_name url _time
[F5_tpsrep_short]
definition =  | stats count by req_elapsed_time client_address node server_name url _time

[F5_tpsrep(2)]
args = server_name,node
definition = `F5LTMACCCESS` server_name=$server_name$ node=$node$ | stats count by req_elapsed_time client_address node server_name url _time
[F5_trafficbyreq]
definition = `F5LTMACCCESS` $server_name$ $node$ | stats count by client_address http_method http_status node server_name url user_agent _time
[F5_trafficbysize]
definition = `F5LTMACCCESS` $server_name$ $node$ | stats count by response_data_size client_address node server_name url _time

[f5_temps_reponse_moyen]
definition =  stats avg(req_elapsed_time) as req_elapsed_time by _time|reverse
[f5_temps_reponse_max]
definition =  stats max(req_elapsed_time) as req_elapsed_time by _time|reverse
[f5_evolution_tps_rep]
definition = timechart span=10s max(req_elapsed_time) as "Max Resp. Time" avg(req_elapsed_time) as "Average Resp. Time" by server_name

[f5_slowestserver]
definition = `F5_tpsrep`|stats max(req_elapsed_time) as "Max response time"  avg(req_elapsed_time) as "Average Response time" by server_name | head 3 | sort - "Max response time" 
[f5_slowestnode]
definition = `F5_tpsrep`|stats max(req_elapsed_time) as "Max response time"  avg(req_elapsed_time) as "Average Response time" by node | head 3 | sort - "Max response time" 
[f5_top_message]
definition = `F5LTMACCCESS`| timechart count by http_status limit=10
[f5_data_size]
definition = `F5LTMACCCESS`| stats count by response_data_size client_address node server_name url _time|timechart sum(response_data_size) as "Response Data Size" by server_name


################################################ NETFLOW

[per_second_chart_dcom(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ | timechart limit=10 $timechart_expr$ useother="f" span=10s| foreach * fieldstr="#FIELD#" [ eval #FIELD# = case('#FIELD#'=="_time", _time, '#FIELD#'=="_span", _span, 1==1, '#FIELD#' / _span) ]

[per_second_chart_dcom_wan(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ | timechart $timechart_expr$  span=10s| foreach * fieldstr="#FIELD#" [ eval #FIELD# = case('#FIELD#'=="_time", _time, '#FIELD#'=="_span", _span, 1==1, '#FIELD#' / _span) ]

[per_second_chart_dcom_by(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ | timechart span=10s  $timechart_expr$ useother="f" by exp_ip | foreach * fieldstr="#FIELD#" [ eval #FIELD# = case('#FIELD#'=="_time", _time, '#FIELD#'=="_span", _span, 1==1, '#FIELD#' / _span) ]

[per_hour_chart_dcom_summary(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ | timechart  $timechart_expr$ useother="f" span=1h

[populate_exporter_list(1)]
args = exp_group
definition = index="flowintegrator_exp_ips" search_name="save_exporters" | join type=left exp_ip [ search `snmp_device_name` ] | eval name = if(isnull(SNMPDeviceName), exp_ip, SNMPDeviceName) | table exp_ip name | dedup exp_ip | lookup exporters_devices_lookup exp_ip OUTPUT device_group AS exp_group | search exp_group="$exp_group$" | table exp_ip name | sort name | eval name=if((name==exp_ip),exp_ip,if(exp_ip=="*","All",exp_ip." (".name.")"))

[populate_exporter_group_list]
definition = inputlookup exporters_devices_lookup | rename device_group as exp_group | sort exp_group | dedup exp_group

[netflow_index]
definition = index=flowintegrator sourcetype=flowintegrator

[netflow_search_traffic_rules]
definition = `netflow_index` (nfc_id=20004 OR nfc_id=20005 OR nfc_id=20011 OR nfc_id=20017 OR nfc_id=20063 OR nfc_id=20067 OR nfc_id=20068 OR nfc_id=20064 OR nfc_id=20065 OR nfc_id=20066)

[netflow_search_rule_20002]
definition = `netflow_index` nfc_id=20002

[netflow_search_rule_20004]
definition = `netflow_index` nfc_id=20004

[netflow_search_rule_20005]
definition = `netflow_index` nfc_id=20005

[netflow_search_rule_20011]
definition = `netflow_index` nfc_id=20011

[netflow_search_rule_20066]
definition = `netflow_index` nfc_id=20066

[netflow_search_rule_20065]
definition = `netflow_index` nfc_id=20065

[netflow_search_rule_20064]
definition = `netflow_index` nfc_id=20064

[netflow_search_rule_20067]
definition = `netflow_index` nfc_id=20067

[netflow_search_rule_20068]
definition = `netflow_index` nfc_id=20068

[netflow_search_rule_20063]
definition = `netflow_index` nfc_id=20063

[netflow_search_rule_20017]
definition = `netflow_index` nfc_id=20017

[netflow_search_cisco_rules]
definition = `netflow_index` (nfc_id=20018 OR nfc_id=20019 OR nfc_id=20020 OR nfc_id=20021)

[netflow_search_rule_20018]
definition = `netflow_index` nfc_id=20018

[netflow_search_rule_20019]
definition = `netflow_index` nfc_id=20019

[netflow_search_rule_20020]
definition = `netflow_index` nfc_id=20020

[netflow_search_rule_20021]
definition = `netflow_index` nfc_id=20021

[netflow_search_palo_rules]
definition = `netflow_index` nfc_id=20030 OR nfc_id=20031 OR nfc_id=20032 OR nfc_id=20033 OR nfc_id=20034 OR nfc_id=20035

[netflow_search_rule_20030]
definition = `netflow_index` nfc_id=20030

[netflow_search_rule_20031]
definition = `netflow_index` nfc_id=20031

[netflow_search_rule_20032]
definition = `netflow_index` nfc_id=20032

[netflow_search_rule_20033]
definition = `netflow_index` nfc_id=20033

[netflow_search_rule_20034]
definition = `netflow_index` nfc_id=20034

[netflow_search_rule_20035]
definition = `netflow_index` nfc_id=20035

[netflow_search_rule_20040]
definition = `netflow_index` nfc_id=20040

[all_fields_rule_20011]
definition = bytes_in bytes_out exp_ip flow_smpl_id mask nfc_id packets_in packets_out percent_of_total protocol src_ip subnet _time t_int

[all_fields_rule_20066]
definition = bytes dest_asn exp_ip flow_count flow_smpl_id packets percent_of_total src_asn _time t_int

[all_fields_rule_20065]
definition = bytes_in dest_tos exp_ip flow_count flow_smpl_id packets_in percent_of_total protocol src_tos _time t_int

[all_fields_rule_20064]
definition = bytes bytes_in bytes_out dest_host dest_ip dest_port exp_ip flow_count flow_smpl_id packets_in packets_out percent_of_total protocol src_host src_ip src_port _time t_int

[all_fields_rule_20067]
definition = bytes_in dest_host dest_ip dest_port dest_tos exp_ip flow_count flow_smpl_id input_snmp output_snmp packets_in percent_of_total protocol src_host src_ip src_port src_tos _time t_int

[all_fields_rule_20068]
definition = `all_fields_rule_20067`

[all_fields_rule_20063]
definition = `all_fields_rule_20067`

[all_fields_rule_20017]
definition = avg_time bytes_in bytes_out dest_ip dest_port exp_ip flow_count flow_smpl_id protocol _time t_int

[all_fields_rule_20018]
definition = exp_ip src_ip dest_port user created_count denied_count bytes percent_of_total _time

[all_fields_rule_20019]
definition = exp_ip dest_ip dest_port created_count denied_count bytes percent_of_total _time

[all_fields_rule_20020]
definition = exp_ip src_ip dest_port denied_count _time

[all_fields_rule_20021]
definition = exp_ip src_ip dest_port user created_count _time

[formatbytes(1)]
args = bytes
definition = case($bytes$ > 1073741824, tostring(round($bytes$/1073741824,2))+" GB", $bytes$ > 1048576, tostring(round($bytes$/1048576,2))+" MB", $bytes$ > 1024, tostring(round($bytes$/1024))+" KB", $bytes$ <= 1024, tostring($bytes$)+" Bytes")

[formatbps(1)]
args = bps
definition = case($bps$ > 1000000000, tostring(round($bps$/1000000000,2))+" Gbps", $bps$ > 1000000, tostring(round($bps$/1000000,2))+" Mbps", $bps$ > 1000, tostring(round($bps$/1000,2))+" Kbps", $bps$ <=1000, tostring(ceil($bps$))+" bps")

[formatpps(1)]
args = pps
definition = case($pps$ > 1000000000, tostring(round($pps$/1000000000,2))+" Gpps", $pps$ > 1000000, tostring(round($pps$/1000000,2))+" Mpps", $pps$ > 1000, tostring(round($pps$/1000,2))+" Kpps", $pps$ <=1000, tostring(ceil($pps$))+" pps")

[formatmsec(1)]
args=ms
definition = case($ms$ > 60000, tostring(round($ms$/60000,2))+" min", $ms$ > 1000, tostring(round($ms$/1000,2))+" sec", $ms$ <=1000, tostring(ceil($ms$))+" msec")

[average_speed(2)]
args = result, expression
definition = addinfo | eval $result$ = ($expression$) / (info_max_time - info_min_time)

[per_second_chart(3)]
args = x, x_expr, timechart_expr
definition = eval $x$ = $x_expr$ | timechart limit=10 $timechart_expr$ useother="f" | foreach * fieldstr="#FIELD#" [ eval #FIELD# = case('#FIELD#'=="_time", _time, '#FIELD#'=="_span", _span, 1==1, '#FIELD#' / _span) ]

[snmp_device_name]
definition = sourcetype="snmp_ta" oid="sysName" earliest=-24h latest=now() | eval short_source=substr(source, 8) | join type=left short_source [ | rest /services/data/inputs/snmp | rename title AS "short_source" | fields short_source destination ] | stats latest(value) as SNMPDeviceName by destination | lookup exporters_devices_lookup management_ip AS destination OUTPUT exp_ip as exp_ip | eval exp_ip = if(exp_ip == "unknown", destination, exp_ip)

[sampling(1)]
args = param
definition = lookup sampling_lookup exp_ip flow_smpl_id OUTPUT smpl_int | eval $param$=if(isnull(smpl_int),$param$,$param$*smpl_int)

[get_iface_name(2)]
args = result, param
definition = lookup exporters_devices_lookup exp_ip OUTPUT management_ip | eval management_ip = if(management_ip=="unknown", exp_ip, management_ip) | lookup interfaces_lookup management_ip snmp_index as $param$ OUTPUT if_name as $result$ | lookup snmp_interface_name_lookup  management_ip  snmp_index as $param$ OUTPUT  if_name as SNMPIfaceName$param$ | eval SNMPIfaceName$param$ = if(isnull(SNMPIfaceName$param$), $param$, SNMPIfaceName$param$) | eval $result$ = if($result$ == "unknown", SNMPIfaceName$param$, $result$)

[get_iface_speed(2)]
args = result, param
definition = lookup exporters_devices_lookup exp_ip OUTPUT management_ip | eval management_ip = if(management_ip=="unknown", exp_ip, management_ip) | lookup interfaces_lookup management_ip snmp_index as $param$ OUTPUT if_speed as $result$ | lookup snmp_interface_speed_lookup management_ip  snmp_index as $param$ OUTPUT  if_speed as SNMPIfaceSpeed$param$ | eval SNMPIfaceSpeed$param$ = if(isnull(SNMPIfaceSpeed$param$), "SNMP query failed", SNMPIfaceSpeed$param$) | eval $result$ = if($result$ == "unknown", SNMPIfaceSpeed$param$, $result$)

[get_exporter_name(1)]
args = result
definition = join type=left exp_ip [ search `snmp_device_name` ] | eval $result$ = if(isnull(SNMPDeviceName), exp_ip, SNMPDeviceName) | eval $result$=if(($result$==exp_ip),exp_ip,exp_ip." (".$result$.")")

[format_traffic_column(3)]
args = result, amount, speed
definition = eval $amount$ = `formatbytes($amount$)` | eval $speed$ = `formatbps($speed$)` | strcat $speed$ "(" $amount$ ")" $result$

[format_packets_column(3)]
args = result, amount, speed
definition = eval $amount$ = tostring($amount$, "commas") | eval $speed$ = `formatpps($speed$)` | strcat $speed$ "(" $amount$ ")" $result$ 

[format_port_column(2)]
args = result, port
definition = lookup port_lookup port AS $port$ OUTPUT service AS service | strcat $port$ "/" protocol_name " (" service ")" $result$ 

[conversation]
definition = `get_iface_name(input_iface, input_snmp)` | `get_iface_name(output_iface, output_snmp)`  | fillnull value="" src_host dest_host | stats sum(bytes_in) AS TrafficAmount sum(packets_in) AS PacketsAmount sum(flow_count) AS Connections by src_ip dest_ip src_host dest_host src_port dest_port protocol_name exp_ip input_iface output_iface | `average_speed(TrafficSpeed, TrafficAmount*8)` | `average_speed(PacketsSpeed, PacketsAmount)` | sort 0 - TrafficAmount | head 100 | `format_traffic_column(Traffic, TrafficAmount, TrafficSpeed)` | `format_packets_column(Packets, PacketsAmount, PacketsSpeed)` | lookup protocol_lookup protocol AS protocol | `format_port_column(src_port_string, src_port)` | `format_port_column(dest_port_string, dest_port)` | `get_exporter_name(exp_ip_name)` | table exp_ip_name src_ip src_host src_port_string dest_ip dest_host dest_port_string input_iface output_iface Traffic Packets Connections | rename exp_ip_name as "Device" | rename src_ip as "Source IP" | rename src_host as "Source Host" | rename src_port_string as "Source Port" | rename dest_ip as "Destination IP" | rename dest_host as "Destination Host" | rename dest_port_string as "Destination Port" | rename input_iface as "Input Interface" | rename output_iface as "Output Interface" | rename Traffic as "Average Traffic Rate (Total Traffic)" | rename Packets as "Average Packet Rate (Total Packets)"

[devices_table(1)]
args = sort_type
definition =  stats sum(bytes_in) AS TrafficAmount sum(packets_in) AS PacketsAmount sparkline(sum(bytes_in)) as TrafficLine sparkline(sum(packets_in)) as PacketsLine by exp_ip | `average_speed(TrafficSpeed, TrafficAmount*8)` | `average_speed(PacketsSpeed, PacketsAmount)` | sort 0 - $sort_type$ | head 100 | eval TrafficSpeed = `formatbps(TrafficSpeed*2)` | eval PacketsSpeed = `formatpps(PacketsSpeed*2)` | `get_exporter_name(exp_ip_name)` | table exp_ip_name TrafficSpeed TrafficLine PacketsSpeed PacketsLine | rename exp_ip_name as "Device" | rename TrafficLine as "Traffic Line" | rename PacketsLine as "Packets Line" | rename TrafficSpeed as "Average Traffic Rate" | rename PacketsSpeed as "Average Packet Rate"

[format_ip_column(3)]
args = result, ip, host
definition =  eval $result$=if(isnull($host$),$ip$,$ip$." (".$host$.")")

[fix_dest_ip_mapping]
definition =  rex field=_raw "(?i) dest_ip=(?P<destip>[^ ]+) " | eval dest_ip=if(dest_ip==dest_host,destip,dest_ip) 

[fix_src_ip_mapping]
definition =  rex field=_raw "(?i) src_ip=(?P<srcip>[^ ]+) " | eval src_ip=if(src_ip==src_host,srcip,src_ip)

[ios_hostname]
definition = sourcetype=cisco:ios |stats values(reported_hostname)

[ios_nbhostname]
definition = sourcetype=cisco:ios |stats dc(reported_hostname)